-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Database SubPackage
--   
--   A framework for code and document generation for scientific software -
--   Database SubPackage
@package drasil-database
@version 0.1.0

module Database.Drasil

-- | Our chunk databases. Should contain all the maps we will need.
data ChunkDB
type RefbyMap = Map UID [UID]
type TraceMap = UMap [UID]
asOrderedList :: UMap a -> [a]

-- | Smart constructor for chunk databases. Takes a list of Quantities (for
--   SymbolTable), NamedIdeas (for TermTable), Concepts (for
--   DefinitionTable), and Units (for UnitTable)
cdb :: (Quantity q, MayHaveUnit q, Idea t, Concept c, IsUnit u) => [q] -> [t] -> [c] -> [u] -> TraceMap -> RefbyMap -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [Section] -> [LabelledContent] -> ChunkDB
collectUnits :: Quantity c => ChunkDB -> [c] -> [UnitDefn]

-- | Smart constructor for a <a>ConceptMap</a>
conceptMap :: (Concept c) => [c] -> ConceptMap

-- | Looks up a uid in the concept instance table. If nothing is found, an
--   error is thrown.
conceptinsLookup :: UID -> ConceptInstanceMap -> ConceptInstance
conceptinsTable :: Lens' ChunkDB ConceptInstanceMap
dataDefnTable :: Lens' ChunkDB DatadefnMap

-- | Looks up a uid in the datadefinition table. If nothing is found, an
--   error is thrown.
datadefnLookup :: UID -> DatadefnMap -> DataDefinition

-- | Looks up a uid in the definition table. If nothing is found, an error
--   is thrown.
defLookup :: UID -> ConceptMap -> ConceptChunk
defTable :: ChunkDB -> ConceptMap

-- | Looks up a uid in the general definition table. If nothing is found,
--   an error is thrown.
gendefLookup :: UID -> GendefMap -> GenDefn
gendefTable :: Lens' ChunkDB GendefMap
generateRefbyMap :: TraceMap -> RefbyMap

-- | Looks up a uid in the instance model table. If nothing is found, an
--   error is thrown.
insmodelLookup :: UID -> InsModelMap -> InstanceModel
insmodelTable :: Lens' ChunkDB InsModelMap

-- | Looks up a uid in the labelled content table. If nothing is found, an
--   error is thrown.
labelledconLookup :: UID -> LabelledContentMap -> LabelledContent
labelledcontentTable :: Lens' ChunkDB LabelledContentMap
refbyLookup :: UID -> RefbyMap -> [UID]
refbyTable :: Lens' ChunkDB RefbyMap

-- | Looks up a uid in the section table. If nothing is found, an error is
--   thrown.
sectionLookup :: UID -> SectionMap -> Section
sectionTable :: Lens' ChunkDB SectionMap

-- | Looks up an uid in the symbol table. If nothing is found, an error is
--   thrown
symbLookup :: UID -> SymbolMap -> QuantityDict
symbolTable :: ChunkDB -> SymbolMap

-- | Looks up an uid in the term table. If nothing is found, an error is
--   thrown
termLookup :: UID -> TermMap -> IdeaDict
termTable :: ChunkDB -> TermMap

-- | Looks up a uid in the theory model table. If nothing is found, an
--   error is thrown.
theoryModelLookup :: UID -> TheoryModelMap -> TheoryModel
theoryModelTable :: Lens' ChunkDB TheoryModelMap
traceLookup :: UID -> TraceMap -> [UID]
traceMap :: HasUID l => (l -> [UID]) -> [l] -> TraceMap
traceTable :: Lens' ChunkDB TraceMap
unitTable :: Lens' ChunkDB UnitMap
ccss :: [Sentence] -> [Expr] -> ChunkDB -> [DefinedQuantityDict]
combine :: Sentence -> ChunkDB -> [DefinedQuantityDict]
getIdeaDict :: Sentence -> ChunkDB -> [IdeaDict]

-- | Get a list of quantities (QuantityDict) from an equation in order to
--   print
vars :: Expr -> ChunkDB -> [QuantityDict]

-- | for listing QDefs in SystemInformation
data Block a
Parallel :: a -> [a] -> Block a

-- | Database for maintaining references. The Int is that reference's
--   number. Maintains access to both num and chunk for easy reference
--   swapping between number and shortname/refname when necessary (or use
--   of number if no shortname exists)
type RefMap a = Map UID (a, Int)

-- | Database for internal references.
data ReferenceDB

-- | Data structure for holding all of the requisite information about a
--   system to be used in artefact generation
data SystemInformation
[SI] :: (CommonIdea a, Idea a, Idea b, HasName c, Quantity e, Eq e, MayHaveUnit e, Quantity f, MayHaveUnit f, Concept f, Eq f, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => {_sys :: a, _kind :: b, _authors :: [c], _quants :: [e], _concepts :: [f], _definitions :: [QDefinition], _datadefs :: [DataDefinition], _inputs :: [h], _outputs :: [i], _defSequence :: [Block QDefinition], _constraints :: [j], _constants :: [QDefinition], _sysinfodb :: ChunkDB, _usedinfodb :: ChunkDB, refdb :: ReferenceDB} -> SystemInformation

-- | Helper for extracting bibliography
citeDB :: SystemInformation -> BibRef
rdb :: BibRef -> [ConceptInstance] -> ReferenceDB
simpleMap :: HasUID a => [a] -> RefMap a
