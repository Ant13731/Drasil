-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-code
@version 0.1.9.0


-- | re-export smart constructors for external code writing
module Language.Drasil.Code

-- | Takes code
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()

-- | Initializes the generator's DrasilState. String parameter is a string
--   representing the date. [Expr] parameter is the sample input values
--   provided by the user
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given DrasilState. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Reads data from a file and converts the values to Exprs. The file must
--   be formatted according to the DataDesc passed as a parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'
data Choices
Choices :: [Lang] -> Modularity -> Structure -> ConstantStructure -> ConstantRepr -> ConceptMatchMap -> SpaceMatch -> ImplementationType -> [ODELibPckg] -> [ODEInfo] -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> Visibility -> [Logging] -> FilePath -> [AuxFile] -> Choices
[lang] :: Choices -> [Lang]
[modularity] :: Choices -> Modularity
[inputStructure] :: Choices -> Structure
[constStructure] :: Choices -> ConstantStructure
[constRepr] :: Choices -> ConstantRepr
[conceptMatch] :: Choices -> ConceptMatchMap
[spaceMatch] :: Choices -> SpaceMatch
[impType] :: Choices -> ImplementationType
[odeLib] :: Choices -> [ODELibPckg]
[odes] :: Choices -> [ODEInfo]
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[comments] :: Choices -> [Comments]
[doxVerbosity] :: Choices -> Verbosity
[dates] :: Choices -> Visibility
[logging] :: Choices -> [Logging]
[logFile] :: Choices -> FilePath
[auxFiles] :: Choices -> [AuxFile]
data Comments
CommentFunc :: Comments
CommentClass :: Comments
CommentMod :: Comments
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data Logging
LogFunc :: Logging
LogVar :: Logging
data Modularity
Modular :: InputModule -> Modularity
Unmodular :: Modularity
data Structure
Unbundled :: Structure
Bundled :: Structure
data ConstantStructure
Inline :: ConstantStructure
WithInputs :: ConstantStructure
Store :: Structure -> ConstantStructure
data ConstantRepr
Var :: ConstantRepr
Const :: ConstantRepr
data InputModule
Combined :: InputModule
Separated :: InputModule
data CodeConcept
Pi :: CodeConcept

-- | Builds a ConceptMatchMap from an association list of chunks and
--   CodeConcepts
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which CodeType should be used to represent each mathematical
--   Space. [CodeType] is preferentially-ordered, first CodeType that does
--   not conflict with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a SpaceMatch from an association list of Spaces and CodeTypes.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile
getSampleData :: Choices -> Maybe FilePath
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices
data CodeSpec
[CodeSpec] :: HasName a => {pName :: Name, authors :: [a], inputs :: [Input], extInputs :: [Input], derivedInputs :: [Derived], outputs :: [Output], configFiles :: [FilePath], execOrder :: [Def], cMap :: ConstraintMap, constants :: [Const], constMap :: ConstantMap, mods :: [Mod], sysinfodb :: ChunkDB} -> CodeSpec

-- | Get a UID of a chunk corresponding to a Func
funcUID :: Func -> UID

-- | FIXME: hack. Use for implementation-stage functions that need to be
--   displayed in the SRS.
funcUID' :: Func -> UID

-- | Convert a Func to an implementation-stage QuantityDict representing
--   the function.
asVC :: Func -> QuantityDict

-- | FIXME: Part of above hack
asVC' :: Func -> QuantityDict

-- | Defines a CodeSpec based on the SystemInformation, Choices, and Mods
--   defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec
relToQD :: ExprRelat c => ChunkDB -> c -> QDefinition

-- | Define an assignment statement
($:=) :: (Quantity c, MayHaveUnit c) => c -> Expr -> FuncStmt
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod
data StateVariable
data Func
data FuncStmt
[FAsg] :: CodeVarChunk -> Expr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> Expr -> FuncStmt
[FFor] :: CodeVarChunk -> Expr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> Expr -> [FuncStmt] -> FuncStmt
[FWhile] :: Expr -> [FuncStmt] -> FuncStmt
[FCond] :: Expr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: Expr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> Expr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: Expr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: Expr -> Expr -> FuncStmt

-- | Define a public state variable based on the given CodeVarChunk
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given CodeVarChunk
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> Expr -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, Expr is the
--   upper bound at that variable (the variable will start with a value of
--   0). [FuncStmt] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> Expr -> [FuncStmt] -> FuncStmt

-- | Define a function that reads data from a file, according to the given
--   DataDesc.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the FuncStmts for its body. Other
--   parameters are function name, description, list of parameters, space
--   of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a Mod with the given Name, Description, Classes, and Functions.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod
junkLine :: Data
multiLine :: LinePattern -> Delim -> Data
repeated :: [DataItem] -> LinePattern
singleLine :: LinePattern -> Delim -> Data
singleton :: DataItem -> Data
type ExternalLibrary = [StepGroup]
data Step
data FunctionInterface
data Argument
externalLib :: [StepGroup] -> ExternalLibrary
choiceSteps :: [[Step]] -> StepGroup
choiceStep :: [Step] -> StepGroup
mandatoryStep :: Step -> StepGroup
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface
lockedArg :: Expr -> Argument
lockedNamedArg :: NamedArgument -> Expr -> Argument
inlineArg :: Space -> Argument
inlineNamedArg :: NamedArgument -> Space -> Argument
preDefinedArg :: CodeVarChunk -> Argument
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument
lockedParam :: CodeVarChunk -> Parameter
unnamedParam :: Space -> Parameter
customClass :: [MethodInfo] -> ClassInfo
implementation :: String -> [MethodInfo] -> ClassInfo
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo
appendCurrSol :: Expr -> Step
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]
assignArrayIndex :: Step
assignSolFromObj :: CodeVarChunk -> Step
initSolListFromArray :: CodeVarChunk -> Step
initSolListWithVal :: Step
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step
returnExprList :: Step
fixedReturn :: Expr -> Step
initSolWithVal :: Step
type ExternalLibraryCall = [StepGroupFill]
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [Expr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [Expr] -> StepFill
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill
data ArgumentFill
UserDefinedArgF :: Maybe NamedArgument -> Expr -> ArgumentFill
BasicF :: Expr -> ArgumentFill
FnF :: [ParameterFill] -> StepFill -> ArgumentFill
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill
RecordF :: [Expr] -> ArgumentFill
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill
choiceStepFill :: Int -> StepFill -> StepGroupFill
mandatoryStepFill :: StepFill -> StepGroupFill
mandatoryStepsFill :: [StepFill] -> StepGroupFill
callStepFill :: FunctionIntFill -> StepFill
libCallFill :: [ArgumentFill] -> FunctionIntFill
userDefinedArgFill :: Expr -> ArgumentFill
basicArgFill :: Expr -> ArgumentFill
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill
recordArgFill :: [Expr] -> ArgumentFill
unnamedParamFill :: CodeVarChunk -> ParameterFill
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill
userDefinedParamFill :: CodeVarChunk -> ParameterFill
customClassFill :: [MethodInfoFill] -> ClassInfoFill
implementationFill :: [MethodInfoFill] -> ClassInfoFill
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill
appendCurrSolFill :: CodeVarChunk -> StepFill
populateSolListFill :: CodeVarChunk -> [StepFill]
assignArrayIndexFill :: CodeVarChunk -> [Expr] -> StepFill
assignSolFromObjFill :: CodeVarChunk -> StepFill
initSolListFromArrayFill :: CodeVarChunk -> StepFill
initSolListWithValFill :: CodeVarChunk -> Expr -> StepFill
solveAndPopulateWhileFill :: FunctionIntFill -> Expr -> FunctionIntFill -> CodeVarChunk -> StepFill
returnExprListFill :: [Expr] -> StepFill
fixedStatementFill :: StepFill
initSolWithValFill :: CodeVarChunk -> Expr -> StepFill
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang
class (AuxiliarySym r) => PackageSym r where {
    type family Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)
class AuxiliarySym r where {
    type family Auxiliary r;
    type family AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)
data AuxData
data PackData
data CodeChunk
data CodeVarChunk
data CodeFuncChunk

-- | Construct a CodeVarChunk from a Quantity
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a CodeFuncChunk from a Quantity
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Constructs an Expr representing the field of an actor
field :: CodeVarChunk -> CodeVarChunk -> Expr
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> Expr -> Expr -> Expr -> [Expr] -> ODEOptions -> ODEInfo
[indepVar] :: ODEInfo -> CodeVarChunk
[depVar] :: ODEInfo -> CodeVarChunk
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> Expr
[tFinal] :: ODEInfo -> Expr
[initVal] :: ODEInfo -> Expr
[odeSyst] :: ODEInfo -> [Expr]
[odeOpts] :: ODEInfo -> ODEOptions
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> Expr -> Expr -> Expr -> [Expr] -> ODEOptions -> ODEInfo
data ODEOptions
ODEOpts :: ODEMethod -> Expr -> Expr -> Expr -> Expr -> ODEOptions
[solveMethod] :: ODEOptions -> ODEMethod
[absTol] :: ODEOptions -> Expr
[relTol] :: ODEOptions -> Expr
[stepSize] :: ODEOptions -> Expr
[initValFstOrd] :: ODEOptions -> Expr
odeOptions :: ODEMethod -> Expr -> Expr -> Expr -> Expr -> ODEOptions
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg
[libName] :: ODELibPckg -> Name
[libVers] :: ODELibPckg -> Version
[libSpec] :: ODELibPckg -> ExternalLibrary
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall
[libPath] :: ODELibPckg -> Maybe FilePath
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, local file path to the library, and list of compatible
--   languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg
unPP :: PythonProject a -> a
unJP :: JavaProject a -> a
unCSP :: CSharpProject a -> a
unCPPP :: CppProject a -> a
unSP :: SwiftProject a -> a

module Data.Drasil.ExternalLibraries.ODELibraries
scipyODEPckg :: ODELibPckg
scipyODESymbols :: [QuantityDict]
osloPckg :: ODELibPckg
osloSymbols :: [QuantityDict]
arrayVecDepVar :: ODEInfo -> CodeVarChunk
apacheODEPckg :: ODELibPckg
apacheODESymbols :: [QuantityDict]
odeintPckg :: ODELibPckg
odeintSymbols :: [QuantityDict]
scipyODELSodaPkg :: ODELibPckg
