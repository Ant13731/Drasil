-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   A framework for code and document generation for scientific software -
--   Code SubPackage
@package drasil-code
@version 0.1.7


-- | re-export smart constructors for external code writing
module Language.Drasil.Code

-- | Takes code and extensions
makeCode :: [[ModData]] -> [Label] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()
generator :: (RenderSym repr) => Choices -> CodeSpec -> State repr
generateCode :: (PackageSym repr) => Lang -> [repr (Package repr) -> ([ModData], Label)] -> State repr -> IO ()
($:=) :: (Quantity c, MayHaveUnit c) => c -> Expr -> FuncStmt
data Choices
Choices :: [Lang] -> ImplementationType -> String -> Logging -> Comments -> ConstraintBehaviour -> ConstraintBehaviour -> Structure -> Choices
[lang] :: Choices -> [Lang]
[impType] :: Choices -> ImplementationType
[logFile] :: Choices -> String
[logging] :: Choices -> Logging
[comments] :: Choices -> Comments
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[inputStructure] :: Choices -> Structure
data CodeSpec
data Comments
CommentNone :: Comments
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data Func
data FuncStmt
[FAsg] :: CodeChunk -> Expr -> FuncStmt
[FFor] :: CodeChunk -> Expr -> [FuncStmt] -> FuncStmt
[FWhile] :: Expr -> [FuncStmt] -> FuncStmt
[FCond] :: Expr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: Expr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDec] :: CodeChunk -> CodeType -> FuncStmt
[FProcCall] :: Func -> [Expr] -> FuncStmt
[FAppend] :: Expr -> Expr -> FuncStmt
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
data Logging
LogNone :: Logging
data Mod
Mod :: Name -> [Func] -> Mod
data Structure
Loose :: Structure
AsClass :: Structure
asExpr :: Func -> Expr
asExpr' :: Func -> Expr
asVC :: Func -> QuantityDict
asVC' :: Func -> QuantityDict
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec
fdec :: (Quantity c, MayHaveUnit c) => c -> FuncStmt
ffor :: (Quantity c, MayHaveUnit c) => c -> Expr -> [FuncStmt] -> FuncStmt
funcData :: Name -> DataDesc -> Func
funcDef :: (Quantity c, MayHaveUnit c) => Name -> [c] -> Space -> [FuncStmt] -> Func
packmod :: Name -> [Func] -> Mod
relToQD :: ExprRelat c => ChunkDB -> c -> QDefinition
data Ind
Explicit :: Integer -> Ind
WithPattern :: Ind
WithLine :: Ind
junk :: Entry
junkLine :: Data
listEntry :: (Quantity c, MayHaveUnit c) => [Ind] -> c -> Entry
multiLine :: LinePattern -> Delim -> Data
repeated :: [Entry] -> LinePattern
singleLine :: LinePattern -> Delim -> Data
singleton :: (Quantity c, MayHaveUnit c) => c -> Data
class (RenderSym repr) => PackageSym repr where {
    type family Package repr;
}
packMods :: PackageSym repr => Label -> [repr (RenderFile repr)] -> repr (Package repr)
class (ModuleSym repr, ControlBlockSym repr) => RenderSym repr where {
    type family RenderFile repr;
}
fileDoc :: RenderSym repr => repr (Module repr) -> repr (RenderFile repr)
top :: RenderSym repr => repr (Module repr) -> repr (Block repr)
bottom :: RenderSym repr => repr (Block repr)
class PermanenceSym repr where {
    type family Permanence repr;
}
static_ :: PermanenceSym repr => repr (Permanence repr)
dynamic_ :: PermanenceSym repr => repr (Permanence repr)
class (BlockSym repr) => BodySym repr where {
    type family Body repr;
}
body :: BodySym repr => [repr (Block repr)] -> repr (Body repr)
bodyStatements :: BodySym repr => [repr (Statement repr)] -> repr (Body repr)
oneLiner :: BodySym repr => repr (Statement repr) -> repr (Body repr)
addComments :: BodySym repr => Label -> repr (Body repr) -> repr (Body repr)
class (StatementSym repr) => BlockSym repr where {
    type family Block repr;
}
block :: BlockSym repr => [repr (Statement repr)] -> repr (Block repr)
class (BodySym repr, ControlStatementSym repr) => ControlBlockSym repr
runStrategy :: ControlBlockSym repr => Label -> [(Label, repr (Body repr))] -> Maybe (repr (Value repr)) -> Maybe (repr (Value repr)) -> repr (Block repr)
listSlice :: ControlBlockSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Value repr) -> Maybe (repr (Value repr)) -> Maybe (repr (Value repr)) -> Maybe (repr (Value repr)) -> repr (Block repr)
class (PermanenceSym repr) => StateTypeSym repr where {
    type family StateType repr;
}
bool :: StateTypeSym repr => repr (StateType repr)
int :: StateTypeSym repr => repr (StateType repr)
float :: StateTypeSym repr => repr (StateType repr)
char :: StateTypeSym repr => repr (StateType repr)
string :: StateTypeSym repr => repr (StateType repr)
infile :: StateTypeSym repr => repr (StateType repr)
outfile :: StateTypeSym repr => repr (StateType repr)
listType :: StateTypeSym repr => repr (Permanence repr) -> repr (StateType repr) -> repr (StateType repr)
intListType :: StateTypeSym repr => repr (Permanence repr) -> repr (StateType repr)
floatListType :: StateTypeSym repr => repr (Permanence repr) -> repr (StateType repr)
boolListType :: StateTypeSym repr => repr (StateType repr)
obj :: StateTypeSym repr => Label -> repr (StateType repr)
enumType :: StateTypeSym repr => Label -> repr (StateType repr)
iterator :: StateTypeSym repr => repr (StateType repr) -> repr (StateType repr)
class (ValueSym repr, Selector repr, SelectorFunction repr, FunctionSym repr) => StatementSym repr where {
    type family Statement repr;
}
(&=) :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
(&.=) :: StatementSym repr => Label -> repr (Value repr) -> repr (Statement repr)
(&=.) :: StatementSym repr => repr (Value repr) -> Label -> repr (Statement repr)
(&-=) :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
(&.-=) :: StatementSym repr => Label -> repr (Value repr) -> repr (Statement repr)
(&+=) :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
(&.+=) :: StatementSym repr => Label -> repr (Value repr) -> repr (Statement repr)
(&++) :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
(&.++) :: StatementSym repr => Label -> repr (Statement repr)
(&~-) :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
(&.~-) :: StatementSym repr => Label -> repr (Statement repr)
assign :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
assignToListIndex :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
varDec :: StatementSym repr => Label -> repr (StateType repr) -> repr (Statement repr)
varDecDef :: StatementSym repr => Label -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
listDec :: StatementSym repr => Label -> Integer -> repr (StateType repr) -> repr (Statement repr)
listDecDef :: StatementSym repr => Label -> repr (StateType repr) -> [repr (Value repr)] -> repr (Statement repr)
objDecDef :: StatementSym repr => Label -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
objDecNew :: StatementSym repr => Label -> repr (StateType repr) -> [repr (Value repr)] -> repr (Statement repr)
extObjDecNew :: StatementSym repr => Label -> Library -> repr (StateType repr) -> [repr (Value repr)] -> repr (Statement repr)
objDecNewVoid :: StatementSym repr => Label -> repr (StateType repr) -> repr (Statement repr)
extObjDecNewVoid :: StatementSym repr => Label -> Library -> repr (StateType repr) -> repr (Statement repr)
constDecDef :: StatementSym repr => Label -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
print :: StatementSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printLn :: StatementSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printStr :: StatementSym repr => String -> repr (Statement repr)
printStrLn :: StatementSym repr => String -> repr (Statement repr)
printFile :: StatementSym repr => repr (Value repr) -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printFileLn :: StatementSym repr => repr (Value repr) -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printFileStr :: StatementSym repr => repr (Value repr) -> String -> repr (Statement repr)
printFileStrLn :: StatementSym repr => repr (Value repr) -> String -> repr (Statement repr)
printList :: StatementSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printLnList :: StatementSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printFileList :: StatementSym repr => repr (Value repr) -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
printFileLnList :: StatementSym repr => repr (Value repr) -> repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
getIntInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
getFloatInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
getBoolInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
getStringInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
getCharInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
discardInput :: StatementSym repr => repr (Statement repr)
getIntFileInput :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
getFloatFileInput :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
getBoolFileInput :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
getStringFileInput :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
getCharFileInput :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
discardFileInput :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
openFileR :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
openFileW :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
openFileA :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
closeFile :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
getFileInputLine :: StatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
discardFileLine :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
stringSplit :: StatementSym repr => Char -> repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
break :: StatementSym repr => repr (Statement repr)
continue :: StatementSym repr => repr (Statement repr)
returnState :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
returnVar :: StatementSym repr => Label -> repr (Statement repr)
valState :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
comment :: StatementSym repr => Label -> repr (Statement repr)
free :: StatementSym repr => repr (Value repr) -> repr (Statement repr)
throw :: StatementSym repr => Label -> repr (Statement repr)
initState :: StatementSym repr => Label -> Label -> repr (Statement repr)
changeState :: StatementSym repr => Label -> Label -> repr (Statement repr)
initObserverList :: StatementSym repr => repr (StateType repr) -> [repr (Value repr)] -> repr (Statement repr)
addObserver :: StatementSym repr => repr (StateType repr) -> repr (Value repr) -> repr (Statement repr)
state :: StatementSym repr => repr (Statement repr) -> repr (Statement repr)
loopState :: StatementSym repr => repr (Statement repr) -> repr (Statement repr)
multi :: StatementSym repr => [repr (Statement repr)] -> repr (Statement repr)
class (StatementSym repr, BodySym repr) => ControlStatementSym repr
ifCond :: ControlStatementSym repr => [(repr (Value repr), repr (Body repr))] -> repr (Body repr) -> repr (Statement repr)
ifNoElse :: ControlStatementSym repr => [(repr (Value repr), repr (Body repr))] -> repr (Statement repr)
switch :: ControlStatementSym repr => repr (Value repr) -> [(repr (Value repr), repr (Body repr))] -> repr (Body repr) -> repr (Statement repr)
switchAsIf :: ControlStatementSym repr => repr (Value repr) -> [(repr (Value repr), repr (Body repr))] -> repr (Body repr) -> repr (Statement repr)
ifExists :: ControlStatementSym repr => repr (Value repr) -> repr (Body repr) -> repr (Body repr) -> repr (Statement repr)
for :: ControlStatementSym repr => repr (Statement repr) -> repr (Value repr) -> repr (Statement repr) -> repr (Body repr) -> repr (Statement repr)
forRange :: ControlStatementSym repr => Label -> repr (Value repr) -> repr (Value repr) -> repr (Value repr) -> repr (Body repr) -> repr (Statement repr)
forEach :: ControlStatementSym repr => Label -> repr (StateType repr) -> repr (Value repr) -> repr (Body repr) -> repr (Statement repr)
while :: ControlStatementSym repr => repr (Value repr) -> repr (Body repr) -> repr (Statement repr)
tryCatch :: ControlStatementSym repr => repr (Body repr) -> repr (Body repr) -> repr (Statement repr)
checkState :: ControlStatementSym repr => Label -> [(repr (Value repr), repr (Body repr))] -> repr (Body repr) -> repr (Statement repr)
notifyObservers :: ControlStatementSym repr => Label -> repr (StateType repr) -> [repr (Value repr)] -> repr (Statement repr)
getFileInputAll :: ControlStatementSym repr => repr (Value repr) -> repr (Value repr) -> repr (Statement repr)
class (StateTypeSym repr, StateVarSym repr) => ValueSym repr where {
    type family Value repr;
}
litTrue :: ValueSym repr => repr (Value repr)
litFalse :: ValueSym repr => repr (Value repr)
litChar :: ValueSym repr => Char -> repr (Value repr)
litFloat :: ValueSym repr => Double -> repr (Value repr)
litInt :: ValueSym repr => Integer -> repr (Value repr)
litString :: ValueSym repr => String -> repr (Value repr)
defaultChar :: ValueSym repr => repr (Value repr)
defaultFloat :: ValueSym repr => repr (Value repr)
defaultInt :: ValueSym repr => repr (Value repr)
defaultString :: ValueSym repr => repr (Value repr)
defaultBool :: ValueSym repr => repr (Value repr)
($->) :: ValueSym repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
($:) :: ValueSym repr => Label -> Label -> repr (Value repr)
const :: ValueSym repr => Label -> repr (Value repr)
var :: ValueSym repr => Label -> repr (Value repr)
extVar :: ValueSym repr => Library -> Label -> repr (Value repr)
self :: ValueSym repr => repr (Value repr)
arg :: ValueSym repr => Integer -> repr (Value repr)
enumElement :: ValueSym repr => Label -> Label -> repr (Value repr)
enumVar :: ValueSym repr => Label -> repr (Value repr)
objVar :: ValueSym repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
objVarSelf :: ValueSym repr => Label -> repr (Value repr)
listVar :: ValueSym repr => Label -> repr (StateType repr) -> repr (Value repr)
listOf :: ValueSym repr => Label -> repr (StateType repr) -> repr (Value repr)
iterVar :: ValueSym repr => Label -> repr (Value repr)
inputFunc :: ValueSym repr => repr (Value repr)
argsList :: ValueSym repr => repr (Value repr)
valName :: ValueSym repr => repr (Value repr) -> String
class (ValueSym repr, UnaryOpSym repr, BinaryOpSym repr) => NumericExpression repr
(#~) :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
(#/^) :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
(#|) :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
(#+) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(#-) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(#*) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(#/) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(#%) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(#^) :: NumericExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
log :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
ln :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
exp :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
sin :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
cos :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
tan :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
csc :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
sec :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
cot :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
arcsin :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
arccos :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
arctan :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
floor :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
ceil :: NumericExpression repr => repr (Value repr) -> repr (Value repr)
class (ValueSym repr, NumericExpression repr) => BooleanExpression repr
(?!) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr)
(?&&) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?||) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?<) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?<=) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?>) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?>=) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?==) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
(?!=) :: BooleanExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
class (ValueSym repr, NumericExpression repr, BooleanExpression repr) => ValueExpression repr
inlineIf :: ValueExpression repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr) -> repr (Value repr)
funcApp :: ValueExpression repr => Label -> [repr (Value repr)] -> repr (Value repr)
selfFuncApp :: ValueExpression repr => Label -> [repr (Value repr)] -> repr (Value repr)
extFuncApp :: ValueExpression repr => Library -> Label -> [repr (Value repr)] -> repr (Value repr)
stateObj :: ValueExpression repr => repr (StateType repr) -> [repr (Value repr)] -> repr (Value repr)
extStateObj :: ValueExpression repr => Library -> repr (StateType repr) -> [repr (Value repr)] -> repr (Value repr)
listStateObj :: ValueExpression repr => repr (StateType repr) -> [repr (Value repr)] -> repr (Value repr)
exists :: ValueExpression repr => repr (Value repr) -> repr (Value repr)
notNull :: ValueExpression repr => repr (Value repr) -> repr (Value repr)
class (FunctionSym repr, ValueSym repr, ValueExpression repr) => Selector repr
objAccess :: Selector repr => repr (Value repr) -> repr (Function repr) -> repr (Value repr)
($.) :: Selector repr => repr (Value repr) -> repr (Function repr) -> repr (Value repr)
objMethodCall :: Selector repr => repr (Value repr) -> Label -> [repr (Value repr)] -> repr (Value repr)
objMethodCallVoid :: Selector repr => repr (Value repr) -> Label -> repr (Value repr)
selfAccess :: Selector repr => repr (Function repr) -> repr (Value repr)
listPopulateAccess :: Selector repr => repr (Value repr) -> repr (Function repr) -> repr (Value repr)
listSizeAccess :: Selector repr => repr (Value repr) -> repr (Value repr)
listIndexExists :: Selector repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
argExists :: Selector repr => Integer -> repr (Value repr)
indexOf :: Selector repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
stringEqual :: Selector repr => repr (Value repr) -> repr (Value repr) -> repr (Value repr)
castObj :: Selector repr => repr (Function repr) -> repr (Value repr) -> repr (Value repr)
castStrToFloat :: Selector repr => repr (Value repr) -> repr (Value repr)
class (ValueSym repr, ValueExpression repr) => FunctionSym repr where {
    type family Function repr;
}
func :: FunctionSym repr => Label -> [repr (Value repr)] -> repr (Function repr)
cast :: FunctionSym repr => repr (StateType repr) -> repr (StateType repr) -> repr (Function repr)
castListToInt :: FunctionSym repr => repr (Function repr)
get :: FunctionSym repr => Label -> repr (Function repr)
set :: FunctionSym repr => Label -> repr (Value repr) -> repr (Function repr)
listSize :: FunctionSym repr => repr (Function repr)
listAdd :: FunctionSym repr => repr (Value repr) -> repr (Value repr) -> repr (Function repr)
listPopulateInt :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listPopulateFloat :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listPopulateChar :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listPopulateBool :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listPopulateString :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listAppend :: FunctionSym repr => repr (Value repr) -> repr (Function repr)
listExtendInt :: FunctionSym repr => repr (Function repr)
listExtendFloat :: FunctionSym repr => repr (Function repr)
listExtendChar :: FunctionSym repr => repr (Function repr)
listExtendBool :: FunctionSym repr => repr (Function repr)
listExtendString :: FunctionSym repr => repr (Function repr)
listExtendList :: FunctionSym repr => Integer -> repr (StateType repr) -> repr (Function repr)
iterBegin :: FunctionSym repr => repr (Function repr)
iterEnd :: FunctionSym repr => repr (Function repr)
class (ValueSym repr, FunctionSym repr, Selector repr) => SelectorFunction repr
listAccess :: SelectorFunction repr => repr (Value repr) -> repr (Function repr)
listSet :: SelectorFunction repr => repr (Value repr) -> repr (Value repr) -> repr (Function repr)
listAccessEnum :: SelectorFunction repr => repr (StateType repr) -> repr (Value repr) -> repr (Function repr)
listSetEnum :: SelectorFunction repr => repr (StateType repr) -> repr (Value repr) -> repr (Value repr) -> repr (Function repr)
at :: SelectorFunction repr => Label -> repr (Function repr)
class (ScopeSym repr, MethodTypeSym repr, ParameterSym repr, StateVarSym repr, BodySym repr) => MethodSym repr where {
    type family Method repr;
}
method :: MethodSym repr => Label -> Label -> repr (Scope repr) -> repr (Permanence repr) -> repr (MethodType repr) -> [repr (Parameter repr)] -> repr (Body repr) -> repr (Method repr)
getMethod :: MethodSym repr => Label -> Label -> repr (MethodType repr) -> repr (Method repr)
setMethod :: MethodSym repr => Label -> Label -> Label -> repr (StateType repr) -> repr (Method repr)
mainMethod :: MethodSym repr => Label -> repr (Body repr) -> repr (Method repr)
privMethod :: MethodSym repr => Label -> Label -> repr (MethodType repr) -> [repr (Parameter repr)] -> repr (Body repr) -> repr (Method repr)
pubMethod :: MethodSym repr => Label -> Label -> repr (MethodType repr) -> [repr (Parameter repr)] -> repr (Body repr) -> repr (Method repr)
constructor :: MethodSym repr => Label -> [repr (Parameter repr)] -> repr (Body repr) -> repr (Method repr)
destructor :: MethodSym repr => Label -> [repr (StateVar repr)] -> repr (Method repr)
function :: MethodSym repr => Label -> repr (Scope repr) -> repr (Permanence repr) -> repr (MethodType repr) -> [repr (Parameter repr)] -> repr (Body repr) -> repr (Method repr)
class (ClassSym repr) => ModuleSym repr where {
    type family Module repr;
}
buildModule :: ModuleSym repr => Label -> [Library] -> [repr (Statement repr)] -> [repr (Method repr)] -> [repr (Class repr)] -> repr (Module repr)
data ModData
MD :: Label -> Bool -> Doc -> ModData
[name] :: ModData -> Label
[isMainMod] :: ModData -> Bool
[modDoc] :: ModData -> Doc
newtype JavaCode a
JC :: a -> JavaCode a
[unJC] :: JavaCode a -> a
newtype PythonCode a
PC :: a -> PythonCode a
[unPC] :: PythonCode a -> a
newtype CSharpCode a
CSC :: a -> CSharpCode a
[unCSC] :: CSharpCode a -> a
newtype CppSrcCode a
CPPSC :: a -> CppSrcCode a
[unCPPSC] :: CppSrcCode a -> a
newtype CppHdrCode a
CPPHC :: a -> CppHdrCode a
[unCPPHC] :: CppHdrCode a -> a
unSrc :: CppCode CppSrcCode CppHdrCode a -> a
unHdr :: CppCode CppSrcCode CppHdrCode a -> a
