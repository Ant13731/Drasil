-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   A framework for code and document generation for scientific software -
--   Code SubPackage
@package drasil-code
@version 0.1.6


-- | re-export smart constructors for external code writing
module Language.Drasil.Code

-- | Takes code and extensions
makeCode :: [[ModData]] -> [Label] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()
generator :: (RenderSym repr) => Choices -> CodeSpec -> State repr
generateCode :: (PackageSym repr) => Lang -> [repr (Package repr) -> ([ModData], Label)] -> State repr -> IO ()
($:=) :: (Quantity c, MayHaveUnit c) => c -> Expr -> FuncStmt
data Choices
Choices :: [Lang] -> ImplementationType -> String -> Logging -> Comments -> ConstraintBehaviour -> ConstraintBehaviour -> Structure -> Choices
[lang] :: Choices -> [Lang]
[impType] :: Choices -> ImplementationType
[logFile] :: Choices -> String
[logging] :: Choices -> Logging
[comments] :: Choices -> Comments
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[inputStructure] :: Choices -> Structure
data CodeSpec
data Comments
CommentNone :: Comments
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data Func
data FuncStmt
[FAsg] :: CodeChunk -> Expr -> FuncStmt
[FFor] :: CodeChunk -> Expr -> [FuncStmt] -> FuncStmt
[FWhile] :: Expr -> [FuncStmt] -> FuncStmt
[FCond] :: Expr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: Expr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDec] :: CodeChunk -> CodeType -> FuncStmt
[FProcCall] :: Func -> [Expr] -> FuncStmt
[FAppend] :: Expr -> Expr -> FuncStmt
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
data Logging
LogNone :: Logging
data Mod
Mod :: Name -> [Func] -> Mod
data Structure
Loose :: Structure
AsClass :: Structure
asExpr :: Func -> Expr
asExpr' :: Func -> Expr
asVC :: Func -> QuantityDict
asVC' :: Func -> QuantityDict
codeSpec :: SystemInformation -> [Mod] -> CodeSpec
fdec :: (Quantity c, MayHaveUnit c) => c -> FuncStmt
ffor :: (Quantity c, MayHaveUnit c) => c -> Expr -> [FuncStmt] -> FuncStmt
funcData :: Name -> DataDesc -> Func
funcDef :: (Quantity c, MayHaveUnit c) => Name -> [c] -> Space -> [FuncStmt] -> Func
packmod :: Name -> [Func] -> Mod
relToQD :: ExprRelat c => ChunkDB -> c -> QDefinition
data Ind
Explicit :: Integer -> Ind
WithPattern :: Ind
WithLine :: Ind
junk :: Entry
junkLine :: Data
listEntry :: (Quantity c, MayHaveUnit c) => [Ind] -> c -> Entry
multiLine :: LinePattern -> Delim -> Data
repeated :: [Entry] -> LinePattern
singleLine :: LinePattern -> Delim -> Data
singleton :: (Quantity c, MayHaveUnit c) => c -> Data
unJC :: JavaCode a -> a
unPC :: PythonCode a -> a
unCSC :: CSharpCode a -> a
unSrc :: CppCode CppSrcCode CppHdrCode a -> a
unHdr :: CppCode CppSrcCode CppHdrCode a -> a
