-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Theory SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-theory
@version 0.1.0.0

module Data.Drasil.TheoryConcepts
dataDefn :: CI
genDefn :: CI
inModel :: CI
thModel :: CI

module Theory.Drasil
class HasInputs c
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]
class HasOutput c
output :: HasOutput c => Lens' c QuantityDict
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]
data DataDefinition

-- | Smart constructor for data definitions
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition
qdFromDD :: DataDefinition -> QDefinition

-- | A GenDefn is a ModelKind that may have units
data GenDefn

-- | Smart constructor for general definitions
gd :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions; no references
gdNoRefs :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related QDefinitions from a list of general definitions
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]
data ModelKinds
EquationalModel :: QDefinition -> ModelKinds
DEModel :: RelationConcept -> ModelKinds
OthModel :: RelationConcept -> ModelKinds
getEqModQds :: [ModelKinds] -> [QDefinition]

-- | An Instance Model is a ModelKind that may have specific input/output
--   constraints. It also has attributes like derivation, source, etc.
data InstanceModel

-- | Smart constructor for instance models with everything defined
im :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivation
imNoDeriv :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no references
imNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivations or references
imNoDerivNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | For building a quantity with no constraint
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input

-- | Grab all related QDefinitions from a list of instance models
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [Relation]
defined_fun :: Theory t => Lens' t [QDefinition]
data TheoryModel
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
tm' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
