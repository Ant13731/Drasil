-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Build System SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-build
@version 0.1.1.0

module Build.Drasil.Make.MakeString
type VarName = String
type VarVal = String
data MakeString
Mr :: String -> MakeString
Mv :: MVar -> MakeString
Mc :: MakeString -> MakeString -> MakeString
(+:+) :: MakeString -> MakeString -> MakeString
data MVar
Os :: VarName -> VarVal -> VarVal -> VarVal -> MVar
Implicit :: VarName -> MVar
Free :: VarName -> MVar
renderMS :: MakeString -> String
renderVar :: (String -> String) -> MVar -> String
makeS :: String -> MakeString
mkWindowsVar :: VarName -> VarVal -> VarVal -> MakeString
mkOSVar :: VarName -> VarVal -> VarVal -> VarVal -> MakeString
mkImplicitVar :: VarName -> MakeString
mkFreeVar :: VarName -> MakeString
instance GHC.Classes.Eq Build.Drasil.Make.MakeString.MVar
instance GHC.Base.Semigroup Build.Drasil.Make.MakeString.MakeString
instance GHC.Base.Monoid Build.Drasil.Make.MakeString.MakeString


-- | Makefile abstract syntax tree
module Build.Drasil.Make.AST
newtype Makefile
M :: [Rule] -> Makefile
data Rule
R :: Target -> Dependencies -> Type -> [Command] -> Rule
data Command
C :: MakeString -> [CommandOpts] -> Command
data CommandOpts
IgnoreReturnCode :: CommandOpts
data Type
Abstract :: Type
File :: Type
type Target = MakeString
type Dependencies = [Target]

-- | Creates a Rule which results in a file being created
mkFile :: Target -> Dependencies -> [Command] -> Rule

-- | Creates an abstract Rule not associated to a specific file
mkRule :: Target -> Dependencies -> [Command] -> Rule

-- | Creates a Command which fails the make process if it does not return
--   zero
mkCheckedCommand :: MakeString -> Command

-- | Creates a command which executes and ignores the return code
mkCommand :: MakeString -> Command
instance GHC.Classes.Eq Build.Drasil.Make.AST.Type
instance GHC.Classes.Eq Build.Drasil.Make.AST.CommandOpts

module Build.Drasil.Make.Import
class RuleTransformer c
makeRule :: RuleTransformer c => c -> [Rule]

-- | Creates a Makefile (calls <a>makeRules</a>)
toMake :: RuleTransformer c => [c] -> Makefile

-- | Helper for creating make rules for different document types
makeRules :: RuleTransformer c => [c] -> [Rule]

module Build.Drasil.Make.Helpers
($=) :: MVar -> String -> Doc
win :: MVar -> String
mac :: MVar -> String
linux :: MVar -> String
defineOsVars :: (MVar -> String) -> [MVar] -> Doc

-- | Helper for rendering OS-specific variables
osDefinitions :: [MVar] -> Doc

-- | Deduplicates a list of variables and ensures duplicate variables have
--   the same definition
uniqueVars :: [MVar] -> [MVar]
varName :: MVar -> String

-- | Extracts variables from a Makefile rule
extractVars :: Rule -> [MVar]
getVars :: MakeString -> [MVar]
isOsVar :: MVar -> Bool

-- | Helper for prepending common features to a Makefile
addCommonFeatures :: [Rule] -> Doc -> Doc

-- | Recipes must be indented with tabs
tab :: Doc

-- | Makefile Syntax Indent (i.e. non recipes)
msIndent :: Doc -> Doc

module Build.Drasil.Make.Print

-- | Generates the makefile by calling <a>build</a> after <a>toMake</a>
genMake :: RuleTransformer c => [c] -> Doc

-- | Renders the makefile rules
build :: Makefile -> Doc

-- | Renders specific makefile rules. Called by <a>build</a>
printRule :: Rule -> Doc

-- | Gathers all rules to abstract targets and tags them as phony.
printPhony :: [Rule] -> Doc

-- | Renders targets with their dependencies
printTarget :: Target -> Dependencies -> Doc
printCmd :: Command -> Doc
printCmds :: [Command] -> Doc

module Build.Drasil
data Command
type Dependencies = [Target]

-- | Creates a Command which fails the make process if it does not return
--   zero
mkCheckedCommand :: MakeString -> Command

-- | Creates a command which executes and ignores the return code
mkCommand :: MakeString -> Command

-- | Creates a Rule which results in a file being created
mkFile :: Target -> Dependencies -> [Command] -> Rule

-- | Creates an abstract Rule not associated to a specific file
mkRule :: Target -> Dependencies -> [Command] -> Rule
data Rule
class RuleTransformer c
makeRule :: RuleTransformer c => c -> [Rule]
(+:+) :: MakeString -> MakeString -> MakeString
makeS :: String -> MakeString
data MakeString
mkFreeVar :: VarName -> MakeString
mkImplicitVar :: VarName -> MakeString
mkWindowsVar :: VarName -> VarVal -> VarVal -> MakeString
mkOSVar :: VarName -> VarVal -> VarVal -> VarVal -> MakeString

-- | Generates the makefile by calling <a>build</a> after <a>toMake</a>
genMake :: RuleTransformer c => [c] -> Doc
