-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Theory SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-theory
@version 0.1.0.0

module Data.Drasil.TheoryConcepts

-- | Data definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
dataDefn :: CI

-- | General definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
genDefn :: CI

-- | Instance model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
inModel :: CI

-- | Theoretical model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
thModel :: CI


-- | Defining all the classes which represent knowledge-about-theories.
module Theory.Drasil.Classes

-- | Members of this class may have inputs.
class HasInputs c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> and maybe
--   constraints.
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]

-- | Members of this class may have outputs.
class HasOutput c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> for output.
output :: HasOutput c => Lens' c QuantityDict

-- | Provides a <tt>Lens</tt> that holds constraints on the output.
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]

module Theory.Drasil.DataDefinition

-- | A scope is an indirect reference to a <a>UID</a>.
newtype Scope
Scp :: UID -> Scope
[_spec] :: Scope -> UID

-- | Determines the scope of data.
data ScopeType

-- | Only visible within a limited scope.
Local :: Scope -> ScopeType

-- | Visible everywhere.
Global :: ScopeType

-- | A data definition is a <a>QDefinition</a> that may have additional
--   notes: the scope, any references, maybe a derivation, a label
--   (<a>ShortName</a>), a reference address, and other notes
--   (<a>Sentence</a>s).
data DataDefinition
DatDef :: QDefinition -> ScopeType -> [Reference] -> Maybe Derivation -> ShortName -> String -> [Sentence] -> DataDefinition
[_qd] :: DataDefinition -> QDefinition
[_scp] :: DataDefinition -> ScopeType
[_ref] :: DataDefinition -> [Reference]
[_deri] :: DataDefinition -> Maybe Derivation
[lbl] :: DataDefinition -> ShortName
[ra] :: DataDefinition -> String
[_notes] :: DataDefinition -> [Sentence]
scp :: Lens' DataDefinition ScopeType
ref :: Lens' DataDefinition [Reference]
qd :: Lens' DataDefinition QDefinition
notes :: Lens' DataDefinition [Sentence]
deri :: Lens' DataDefinition (Maybe Derivation)

-- | Smart constructor for data definitions.
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Extracts the <a>QDefinition</a> from a <a>DataDefinition</a>.
qdFromDD :: DataDefinition -> QDefinition
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Idea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasSpace Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasSymbol Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Quantity Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.DefiningExpr Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasReference Theory.Drasil.DataDefinition.DataDefinition
instance GHC.Classes.Eq Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Referable Theory.Drasil.DataDefinition.DataDefinition

module Theory.Drasil.ModelKinds

-- | Models can be of different kinds:
--   
--   <ul>
--   <li>Equational models contain <a>QDefinition</a>s,</li>
--   <li>Differential equation models contain <a>RelationConcept</a>s,</li>
--   <li>Other models contain <a>RelationConcept</a>s.</li>
--   </ul>
data ModelKinds
EquationalModel :: QDefinition -> ModelKinds
DEModel :: RelationConcept -> ModelKinds
OthModel :: RelationConcept -> ModelKinds

-- | A <tt>Setter</tt> for <a>ModelKinds</a> built upon <a>QDefinition</a>s
--   or <a>RelationConcept</a>s.
setMk :: ModelKinds -> Setter' QDefinition a -> Setter' RelationConcept a -> a -> ModelKinds

-- | A <a>Getter</a> for extracting <a>QDefinition</a>s or
--   <a>RelationConcept</a>s from <a>ModelKinds</a>.
elimMk :: Getter QDefinition a -> Getter RelationConcept a -> ModelKinds -> a

-- | Make a <tt>Lens</tt> for <a>ModelKinds</a>. They may contain either
--   <a>QDefinition</a>s or <a>RelationConcept</a>s.
lensMk :: forall a. Lens' QDefinition a -> Lens' RelationConcept a -> Lens' ModelKinds a

-- | Extract a list of <a>QDefinition</a>s from a list of
--   <a>ModelKinds</a>.
getEqModQds :: [ModelKinds] -> [QDefinition]
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.Idea Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.Definition Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.ModelKinds.ModelKinds

module Theory.Drasil.InstanceModel

-- | An instance model is a ModelKind that may have specific inputs,
--   outputs, and output constraints. It also has attributes like
--   references, derivation, labels (<a>ShortName</a>), reference address,
--   and notes.
data InstanceModel

-- | Smart constructor for instance models with everything defined.
im :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no derivation.
imNoDeriv :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no references.
imNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no derivations or
--   references.
imNoDerivNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | Grab all related <a>QDefinition</a>s from a list of instance models.
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]

-- | For building a quantity with no constraint.
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint.
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Idea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Definition Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasReference Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Quantity Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Referable Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasInputs Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasOutput Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasSymbol Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasSpace Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.InstanceModel.InstanceModel

module Theory.Drasil.GenDefn

-- | A general definition is a <tt>ModelKind</tt> that may have units, a
--   derivation, references, a shortname, a reference address, and notes.
data GenDefn

-- | Smart constructor for general definitions derived from ModelKinds.
gd :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references, derived
--   from ModelKinds.
gdNoRefs :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions.
gd' :: IsUnit u => UID -> ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references.
gdNoRefs' :: IsUnit u => UID -> ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related <tt>QDefinitions</tt> from a list of general
--   definitions.
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Idea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Definition Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasReference Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Referable Theory.Drasil.GenDefn.GenDefn

module Theory.Drasil.Theory

-- | Theories are the basis for building models with context, spaces,
--   quantities, operations, invariants, etc.
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [Relation]
defined_fun :: Theory t => Lens' t [QDefinition]

-- | A TheoryModel is a collection of:
--   
--   <ul>
--   <li>tUid - a UID,</li>
--   <li>con - a ConceptChunk,</li>
--   <li>vctx - definition context (<a>TheoryModel</a>s),</li>
--   <li>spc - type definitions (<a>SpaceDefn</a>s),</li>
--   <li>quan - quantities (<a>QuantityDict</a>s),</li>
--   <li>ops - operations (<a>ConceptChunk</a>s),</li>
--   <li>defq - definitions (<a>QDefinition</a>s),</li>
--   <li>invs - invariants (<a>Relation</a>s),</li>
--   <li>dfun - defined functions (<a>QDefinition</a>s),</li>
--   <li>ref - accompanying references (<a>Reference</a>s),</li>
--   <li>lb - a label (<a>SpaceDefn</a>),</li>
--   <li>ra - reference address (<a>SpaceDefn</a>),</li>
--   <li>notes - additional notes (<a>Sentence</a>s).</li>
--   </ul>
--   
--   Right now, neither the definition context (vctx) nor the spaces (spc)
--   are ever defined.
data TheoryModel

-- | Constructor for theory models.
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models with no references.
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Must have a source. Uses the shortname
--   of the reference address.
tm' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Uses the shortname of the reference
--   address.
tmNoRefs' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Idea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Definition Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.HasReference Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.Theory.TheoryModel
instance Theory.Drasil.Theory.Theory Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Referable Theory.Drasil.Theory.TheoryModel

module Theory.Drasil

-- | Members of this class may have inputs.
class HasInputs c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> and maybe
--   constraints.
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]

-- | Members of this class may have outputs.
class HasOutput c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> for output.
output :: HasOutput c => Lens' c QuantityDict

-- | Provides a <tt>Lens</tt> that holds constraints on the output.
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]

-- | A data definition is a <a>QDefinition</a> that may have additional
--   notes: the scope, any references, maybe a derivation, a label
--   (<a>ShortName</a>), a reference address, and other notes
--   (<a>Sentence</a>s).
data DataDefinition

-- | Smart constructor for data definitions.
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Extracts the <a>QDefinition</a> from a <a>DataDefinition</a>.
qdFromDD :: DataDefinition -> QDefinition

-- | A general definition is a <tt>ModelKind</tt> that may have units, a
--   derivation, references, a shortname, a reference address, and notes.
data GenDefn

-- | Smart constructor for general definitions derived from ModelKinds.
gd :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references, derived
--   from ModelKinds.
gdNoRefs :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions.
gd' :: IsUnit u => UID -> ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references.
gdNoRefs' :: IsUnit u => UID -> ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related <tt>QDefinitions</tt> from a list of general
--   definitions.
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]

-- | Models can be of different kinds:
--   
--   <ul>
--   <li>Equational models contain <a>QDefinition</a>s,</li>
--   <li>Differential equation models contain <a>RelationConcept</a>s,</li>
--   <li>Other models contain <a>RelationConcept</a>s.</li>
--   </ul>
data ModelKinds
EquationalModel :: QDefinition -> ModelKinds
DEModel :: RelationConcept -> ModelKinds
OthModel :: RelationConcept -> ModelKinds

-- | Extract a list of <a>QDefinition</a>s from a list of
--   <a>ModelKinds</a>.
getEqModQds :: [ModelKinds] -> [QDefinition]

-- | An instance model is a ModelKind that may have specific inputs,
--   outputs, and output constraints. It also has attributes like
--   references, derivation, labels (<a>ShortName</a>), reference address,
--   and notes.
data InstanceModel

-- | Smart constructor for instance models with everything defined.
im :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no derivation.
imNoDeriv :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no references.
imNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with no derivations or
--   references.
imNoDerivNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | For building a quantity with no constraint.
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint.
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input

-- | Grab all related <a>QDefinition</a>s from a list of instance models.
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]

-- | Theories are the basis for building models with context, spaces,
--   quantities, operations, invariants, etc.
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [Relation]
defined_fun :: Theory t => Lens' t [QDefinition]

-- | A TheoryModel is a collection of:
--   
--   <ul>
--   <li>tUid - a UID,</li>
--   <li>con - a ConceptChunk,</li>
--   <li>vctx - definition context (<a>TheoryModel</a>s),</li>
--   <li>spc - type definitions (<a>SpaceDefn</a>s),</li>
--   <li>quan - quantities (<a>QuantityDict</a>s),</li>
--   <li>ops - operations (<a>ConceptChunk</a>s),</li>
--   <li>defq - definitions (<a>QDefinition</a>s),</li>
--   <li>invs - invariants (<a>Relation</a>s),</li>
--   <li>dfun - defined functions (<a>QDefinition</a>s),</li>
--   <li>ref - accompanying references (<a>Reference</a>s),</li>
--   <li>lb - a label (<a>SpaceDefn</a>),</li>
--   <li>ra - reference address (<a>SpaceDefn</a>),</li>
--   <li>notes - additional notes (<a>Sentence</a>s).</li>
--   </ul>
--   
--   Right now, neither the definition context (vctx) nor the spaces (spc)
--   are ever defined.
data TheoryModel

-- | Constructor for theory models.
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models with no references.
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Must have a source. Uses the shortname
--   of the reference address.
tm' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Uses the shortname of the reference
--   address.
tmNoRefs' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
