-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Theory SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-theory
@version 0.1.0.0

module Data.Drasil.TheoryConcepts
dataDefn :: CI
genDefn :: CI
inModel :: CI
thModel :: CI


-- | Defining all the classes which represent knowledge-about-theories
module Theory.Drasil.Classes
class HasInputs c
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]
class HasOutput c
output :: HasOutput c => Lens' c QuantityDict
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]

module Theory.Drasil.DataDefinition
newtype Scope
Scp :: UID -> Scope
[_spec] :: Scope -> UID
data ScopeType
Local :: Scope -> ScopeType
Global :: ScopeType
data DataDefinition
DatDef :: QDefinition -> ScopeType -> [Reference] -> Maybe Derivation -> ShortName -> String -> [Sentence] -> DataDefinition
[_qd] :: DataDefinition -> QDefinition
[_scp] :: DataDefinition -> ScopeType
[_ref] :: DataDefinition -> [Reference]
[_deri] :: DataDefinition -> Maybe Derivation
[lbl] :: DataDefinition -> ShortName
[ra] :: DataDefinition -> String
[_notes] :: DataDefinition -> [Sentence]
scp :: Lens' DataDefinition ScopeType
ref :: Lens' DataDefinition [Reference]
qd :: Lens' DataDefinition QDefinition
notes :: Lens' DataDefinition [Sentence]
deri :: Lens' DataDefinition (Maybe Derivation)

-- | Smart constructor for data definitions
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition
qdFromDD :: DataDefinition -> QDefinition
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Idea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasSpace Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasSymbol Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Quantity Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.DefiningExpr Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasReference Theory.Drasil.DataDefinition.DataDefinition
instance GHC.Classes.Eq Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.Referable Theory.Drasil.DataDefinition.DataDefinition

module Theory.Drasil.ModelKinds
data ModelKinds
EquationalModel :: QDefinition -> ModelKinds
DEModel :: RelationConcept -> ModelKinds
OthModel :: RelationConcept -> ModelKinds
setMk :: ModelKinds -> Setter' QDefinition a -> Setter' RelationConcept a -> a -> ModelKinds
elimMk :: Getter QDefinition a -> Getter RelationConcept a -> ModelKinds -> a
lensMk :: forall a. Lens' QDefinition a -> Lens' RelationConcept a -> Lens' ModelKinds a
getEqModQds :: [ModelKinds] -> [QDefinition]
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.Idea Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.Definition Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.ModelKinds.ModelKinds
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.ModelKinds.ModelKinds

module Theory.Drasil.InstanceModel

-- | An Instance Model is a ModelKind that may have specific input/output
--   constraints. It also has attributes like derivation, source, etc.
data InstanceModel

-- | Smart constructor for instance models with everything defined
im :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivation
imNoDeriv :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no references
imNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivations or references
imNoDerivNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | Grab all related QDefinitions from a list of instance models
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]

-- | For building a quantity with no constraint
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Idea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Definition Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasReference Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Quantity Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Referable Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasInputs Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasOutput Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Core.HasSymbol Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasSpace Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.InstanceModel.InstanceModel

module Theory.Drasil.GenDefn

-- | A GenDefn is a ModelKind that may have units
data GenDefn

-- | Smart constructor for general definitions
gd :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions; no references
gdNoRefs :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related QDefinitions from a list of general definitions
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Idea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Definition Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.ExprRelat Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasDerivation Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasReference Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Referable Theory.Drasil.GenDefn.GenDefn

module Theory.Drasil.Theory
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [Relation]
defined_fun :: Theory t => Lens' t [QDefinition]
data TheoryModel
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
tm' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
instance Language.Drasil.Classes.Core.HasUID Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.NamedIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Idea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Definition Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.HasReference Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.Theory.TheoryModel
instance Theory.Drasil.Theory.Theory Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Core.HasShortName Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Core.HasRefAddress Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Referable Theory.Drasil.Theory.TheoryModel

module Theory.Drasil
class HasInputs c
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]
class HasOutput c
output :: HasOutput c => Lens' c QuantityDict
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]
data DataDefinition

-- | Smart constructor for data definitions
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition
qdFromDD :: DataDefinition -> QDefinition

-- | A GenDefn is a ModelKind that may have units
data GenDefn

-- | Smart constructor for general definitions
gd :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions; no references
gdNoRefs :: IsUnit u => ModelKinds -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related QDefinitions from a list of general definitions
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]
data ModelKinds
EquationalModel :: QDefinition -> ModelKinds
DEModel :: RelationConcept -> ModelKinds
OthModel :: RelationConcept -> ModelKinds
getEqModQds :: [ModelKinds] -> [QDefinition]

-- | An Instance Model is a ModelKind that may have specific input/output
--   constraints. It also has attributes like derivation, source, etc.
data InstanceModel

-- | Smart constructor for instance models with everything defined
im :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivation
imNoDeriv :: ModelKinds -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no references
imNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models; no derivations or references
imNoDerivNoRefs :: ModelKinds -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | For building a quantity with no constraint
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input

-- | Grab all related QDefinitions from a list of instance models
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [Relation]
defined_fun :: Theory t => Lens' t [QDefinition]
data TheoryModel
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
tm' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel
tmNoRefs' :: (Quantity q, MayHaveUnit q, Concept c) => UID -> ModelKinds -> [q] -> [c] -> [QDefinition] -> [Relation] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
