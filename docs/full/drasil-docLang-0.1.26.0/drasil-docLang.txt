-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Document Language SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-docLang
@version 0.1.26.0

module Drasil.DocLang.SRS

-- | Appendix section.
--   
--   Standard SRS section builders.
appendix :: [Contents] -> [Section] -> Section

-- | Assumptions section.
--   
--   Standard SRS section builders.
assumpt :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
assumptLabel :: Reference

-- | Characteristics of Intended Reader section.
--   
--   Standard SRS section builders.
charOfIR :: [Contents] -> [Section] -> Section

-- | Data Constraints section.
--   
--   Standard SRS section builders.
datCon :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
datConLabel :: Reference

-- | Data Definitions section.
--   
--   Standard SRS section builders.
dataDefn :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
dataDefnLabel :: Reference

-- | Names document "Software Requirement Specifications for
--   <tt>system</tt>".
--   
--   SRS document constructor. Creates the SRS from a given system name,
--   authors, and sections.
doc :: NamedIdea c => c -> Sentence -> [Section] -> Document

-- | Similar to <a>doc</a>, but uses plural form of <tt>systems</tt> in the
--   title.
--   
--   SRS document constructor. Creates the SRS from a given system name,
--   authors, and sections.
doc' :: NamedIdea c => c -> Sentence -> [Section] -> Document

-- | Functional Requirements section.
--   
--   Standard SRS section builders.
funcReq :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
funcReqLabel :: Reference

-- | General Definitions section.
--   
--   Standard SRS section builders.
genDefn :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
genDefnLabel :: Reference

-- | General System Description section.
--   
--   Standard SRS section builders.
genSysDes :: [Contents] -> [Section] -> Section

-- | Goal Statement section.
--   
--   Standard SRS section builders.
goalStmt :: [Contents] -> [Section] -> Section

-- | Instance Models section.
--   
--   Standard SRS section builders.
inModel :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
inModelLabel :: Reference

-- | Individual Product Use Case section.
--   
--   Standard SRS section builders.
indPRCase :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
indPRCaseLabel :: Reference

-- | Introduction section.
--   
--   Standard SRS section builders.
intro :: [Contents] -> [Section] -> Section

-- | Likely Changes section.
--   
--   Standard SRS section builders.
likeChg :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
likeChgLabel :: Reference

-- | Non-Functional Requirements section.
--   
--   Standard SRS section builders.
nonfuncReq :: [Contents] -> [Section] -> Section

-- | Off-the-Shelf Solutions section.
--   
--   Standard SRS section builders.
offShelfSol :: [Contents] -> [Section] -> Section

-- | Organization of Document section.
--   
--   Standard SRS section builders.
orgOfDoc :: [Contents] -> [Section] -> Section

-- | Physical System Description section.
--   
--   Standard SRS section builders.
physSyst :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
physSystLabel :: Reference

-- | Problem Description section.
--   
--   Standard SRS section builders.
probDesc :: [Contents] -> [Section] -> Section

-- | Product Use Case Table section.
--   
--   Standard SRS section builders.
prodUCTable :: [Contents] -> [Section] -> Section

-- | Properties of a Correct Solution section.
--   
--   Standard SRS section builders.
propCorSol :: [Contents] -> [Section] -> Section

-- | Purpose of Document section.
--   
--   Standard SRS section builders.
prpsOfDoc :: [Contents] -> [Section] -> Section

-- | References section.
--   
--   Standard SRS section builders.
reference :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
referenceLabel :: Reference

-- | Requirements section.
--   
--   Standard SRS section builders.
require :: [Contents] -> [Section] -> Section

-- | Scope of Requirements section.
--   
--   Standard SRS section builders.
scpOfReq :: [Contents] -> [Section] -> Section

-- | Scope of the Project section.
--   
--   Standard SRS section builders.
scpOfTheProj :: [Contents] -> [Section] -> Section

-- | Solution Characteristics Specification section.
--   
--   Standard SRS section builders.
solCharSpec :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
solCharSpecLabel :: Reference

-- | Specific System Description section.
--   
--   Standard SRS section builders.
specSysDes :: [Contents] -> [Section] -> Section

-- | Stakeholders section.
--   
--   Standard SRS section builders.
stakeholder :: [Contents] -> [Section] -> Section

-- | System Constraints section.
--   
--   Standard SRS section builders.
sysCon :: [Contents] -> [Section] -> Section

-- | System Context section.
--   
--   Standard SRS section builders.
sysCont :: [Contents] -> [Section] -> Section

-- | Table of Symbols section.
--   
--   Standard SRS section builders.
tOfSymb :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfSymbLabel :: Reference

-- | Table of Units section.
--   
--   Standard SRS section builders.
tOfUnit :: [Contents] -> [Section] -> Section

-- | Terminology and Definitions section.
--   
--   Standard SRS section builders.
termAndDefn :: [Contents] -> [Section] -> Section

-- | Terminology section.
--   
--   Standard SRS section builders.
termogy :: [Contents] -> [Section] -> Section

-- | Theoretical Models section.
--   
--   Standard SRS section builders.
thModel :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
thModelLabel :: Reference

-- | The Client section.
--   
--   Standard SRS section builders.
theClient :: [Contents] -> [Section] -> Section

-- | The Customer section.
--   
--   Standard SRS section builders.
theCustomer :: [Contents] -> [Section] -> Section

-- | Traceablilty Matrices and Graphs section.
--   
--   Standard SRS section builders.
traceyMandG :: [Contents] -> [Section] -> Section

-- | Unlikely Changes section.
--   
--   Standard SRS section builders.
unlikeChg :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
unlikeChgLabel :: Reference

-- | User Characteristics section.
--   
--   Standard SRS section builders.
userChar :: [Contents] -> [Section] -> Section

-- | Values of Auxiliary Constants section.
--   
--   Standard SRS section builders.
valsOfAuxCons :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
valsOfAuxConsLabel :: Reference

module Drasil.DocumentLanguage.Labels

-- | Makes a reference label for a goal statement.
goalStmtLabel :: Reference

-- | Makes a reference label for a soultion statement.
solutionLabel :: Reference

-- | Makes a reference label for a characteristics statement.
characteristicsLabel :: Reference

module Drasil.DocumentLanguage.RefHelpers
data ModelDB
tmRefDB :: ModelDB -> RefMap TheoryModel
gdRefDB :: ModelDB -> RefMap GenDefn
ddRefDB :: ModelDB -> RefMap DataDefinition
imRefDB :: ModelDB -> RefMap InstanceModel
mdb :: [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> ModelDB
modelsFromDB :: RefMap a -> [a]

module Drasil.DocumentLanguage.Units

-- | Get the units, if they exist, and wrap them as a Sentence
toSentence :: MayHaveUnit u => u -> Sentence
toSentenceUnitless :: MayHaveUnit u => u -> Sentence

module Drasil.DocumentLanguage.Definitions

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits
IgnoreUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Create a data definition using a list of fields, a database of
--   symbols, and a <a>QDefinition</a> (called automatically by
--   <tt>SCSSub</tt> program).
ddefn :: Fields -> SystemInformation -> DataDefinition -> LabelledContent

-- | Create a derivation from a chunk's attributes. This follows the TM,
--   DD, GD, or IM definition automatically (called automatically by
--   <tt>SCSSub</tt> program).
derivation :: (HasDerivation c, HasShortName c, Referable c) => c -> Contents

-- | Create a general definition using a list of fields, database of
--   symbols, and a <a>GenDefn</a> (general definition) chunk (called
--   automatically by <tt>SCSSub</tt> program).
gdefn :: Fields -> SystemInformation -> GenDefn -> LabelledContent
helperRefs :: HasUID t => t -> SystemInformation -> Sentence
helpToRefField :: UID -> SystemInformation -> Sentence

-- | Create an instance model using a list of fields, database of symbols,
--   and an <a>InstanceModel</a> chunk (called automatically by
--   <tt>SCSSub</tt> program).
instanceModel :: Fields -> SystemInformation -> InstanceModel -> LabelledContent

-- | Create a theoretical model using a list of fields to be displayed, a
--   database of symbols, and a <a>RelationConcept</a> (called
--   automatically by <tt>SCSSub</tt> program).
tmodel :: Fields -> SystemInformation -> TheoryModel -> LabelledContent
instance GHC.Show.Show Drasil.DocumentLanguage.Definitions.Field

module Drasil.DocumentLanguage.TraceabilityMatrix
type TraceViewCat = [UID] -> ChunkDB -> [UID]
traceMGF :: [LabelledContent] -> [Sentence] -> [Contents] -> [Section] -> Section
traceMIntro :: [LabelledContent] -> [Sentence] -> Contents
traceGIntro :: [LabelledContent] -> [Sentence] -> [UnlabelledContent]
traceMReferees :: ([UID] -> [UID]) -> ChunkDB -> [UID]
traceMReferrers :: ([UID] -> [UID]) -> ChunkDB -> [UID]
traceMHeader :: (ChunkDB -> [UID]) -> SystemInformation -> [Sentence]
traceMColHeader :: ([UID] -> [UID]) -> SystemInformation -> [Sentence]
traceMRowHeader :: ([UID] -> [UID]) -> SystemInformation -> [Sentence]
traceMColumns :: ([UID] -> [UID]) -> ([UID] -> [UID]) -> ChunkDB -> [[UID]]
tableShows :: LabelledContent -> Sentence -> Sentence
generateTraceTableView :: UID -> Sentence -> [TraceViewCat] -> [TraceViewCat] -> SystemInformation -> LabelledContent
ensureItems :: UID -> [a] -> [a]
layoutUIDs :: [TraceViewCat] -> ChunkDB -> [UID] -> [UID]
traceViewFilt :: HasUID a => (a -> Bool) -> Getting (UMap a) ChunkDB (UMap a) -> TraceViewCat
traceView :: HasUID a => Getting (UMap a) ChunkDB (UMap a) -> TraceViewCat
traceViewCC :: Concept c => c -> TraceViewCat

module Drasil.DocumentLanguage.Core

-- | Type synonym for clarity.
type System = Sentence

-- | Type synonym for clarity.
type DocKind = Sentence

-- | A document description is made up of document sections.
type DocDesc = [DocSection]

-- | Document sections are either Reference, Introduction, or Specific
--   System Description sections (for now!).
data DocSection
RefSec :: RefSec -> DocSection
IntroSec :: IntroSec -> DocSection
StkhldrSec :: StkhldrSec -> DocSection
GSDSec :: GSDSec -> DocSection
SSDSec :: SSDSec -> DocSection
ReqrmntSec :: ReqrmntSec -> DocSection
LCsSec :: LCsSec -> DocSection
UCsSec :: UCsSec -> DocSection
TraceabilitySec :: TraceabilitySec -> DocSection
AuxConstntSec :: AuxConstntSec -> DocSection
Bibliography :: DocSection
AppndxSec :: AppndxSec -> DocSection
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (singular topic).
Doc :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Type synonym for clarity.
type Topic = IdeaDict

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: Sentence -> CI -> Section -> Sentence -> IntroSub

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | Systen constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Specific System Description section. Contains a list of subsections
--   (<a>SSDSub</a>).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | System description problems.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics specification.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Problem Description section. Contains an intro or title,
--   <a>Section</a>s, and problem description subsections (<a>PDSub</a>).
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Problem Description subsections.
data PDSub

-- | Terms and definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical system description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> [ConceptInstance] -> PDSub

-- | Solution Characteristics Specification section. Contains a list of
--   subsections (<a>SCSSub</a>).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: [ConceptInstance] -> SCSSub

-- | Theory Models.
[TMs] :: [Sentence] -> Fields -> [TheoryModel] -> SCSSub

-- | General Definitions.
[GDs] :: [Sentence] -> Fields -> [GenDefn] -> DerivationDisplay -> SCSSub

-- | Data Definitions.
[DDs] :: [Sentence] -> Fields -> [DataDefinition] -> DerivationDisplay -> SCSSub

-- | Instance Models.
[IMs] :: [Sentence] -> Fields -> [InstanceModel] -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | Requirements section. Contains a list of subsections (<a>ReqsSub</a>).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. LabelledContent needed for tables.
[FReqsSub'] :: [ConceptInstance] -> [LabelledContent] -> ReqsSub

-- | Functional requirements. LabelledContent needed for tables.
[FReqsSub] :: [ConceptInstance] -> [LabelledContent] -> ReqsSub

-- | Non-functional requirements.
[NonFReqsSub] :: [ConceptInstance] -> ReqsSub

-- | Likely Changes section.
newtype LCsSec
LCsProg :: [ConceptInstance] -> LCsSec

-- | Unlikely Changes section.
newtype UCsSec
UCsProg :: [ConceptInstance] -> UCsSec

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | Traceability Matices and Graphs configurations.
data TraceConfig
TraceConfig :: UID -> [Sentence] -> Sentence -> [TraceViewCat] -> [TraceViewCat] -> TraceConfig

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [QDefinition] -> AuxConstntSec

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Holds all of the different kinds of sections. Defines as a plate with
--   an applicative functor.
data DLPlate f
DLPlate :: (DocSection -> f DocSection) -> (RefSec -> f RefSec) -> (IntroSec -> f IntroSec) -> (IntroSub -> f IntroSub) -> (StkhldrSec -> f StkhldrSec) -> (StkhldrSub -> f StkhldrSub) -> (GSDSec -> f GSDSec) -> (GSDSub -> f GSDSub) -> (SSDSec -> f SSDSec) -> (SSDSub -> f SSDSub) -> (ProblemDescription -> f ProblemDescription) -> (PDSub -> f PDSub) -> (SCSSub -> f SCSSub) -> (ReqrmntSec -> f ReqrmntSec) -> (ReqsSub -> f ReqsSub) -> (LCsSec -> f LCsSec) -> (UCsSec -> f UCsSec) -> (TraceabilitySec -> f TraceabilitySec) -> (OffShelfSolnsSec -> f OffShelfSolnsSec) -> (AuxConstntSec -> f AuxConstntSec) -> (AppndxSec -> f AppndxSec) -> DLPlate f
[docSec] :: DLPlate f -> DocSection -> f DocSection
[refSec] :: DLPlate f -> RefSec -> f RefSec
[introSec] :: DLPlate f -> IntroSec -> f IntroSec
[introSub] :: DLPlate f -> IntroSub -> f IntroSub
[stkSec] :: DLPlate f -> StkhldrSec -> f StkhldrSec
[stkSub] :: DLPlate f -> StkhldrSub -> f StkhldrSub
[gsdSec] :: DLPlate f -> GSDSec -> f GSDSec
[gsdSub] :: DLPlate f -> GSDSub -> f GSDSub
[ssdSec] :: DLPlate f -> SSDSec -> f SSDSec
[ssdSub] :: DLPlate f -> SSDSub -> f SSDSub
[pdSec] :: DLPlate f -> ProblemDescription -> f ProblemDescription
[pdSub] :: DLPlate f -> PDSub -> f PDSub
[scsSub] :: DLPlate f -> SCSSub -> f SCSSub
[reqSec] :: DLPlate f -> ReqrmntSec -> f ReqrmntSec
[reqSub] :: DLPlate f -> ReqsSub -> f ReqsSub
[lcsSec] :: DLPlate f -> LCsSec -> f LCsSec
[ucsSec] :: DLPlate f -> UCsSec -> f UCsSec
[traceSec] :: DLPlate f -> TraceabilitySec -> f TraceabilitySec
[offShelfSec] :: DLPlate f -> OffShelfSolnsSec -> f OffShelfSolnsSec
[auxConsSec] :: DLPlate f -> AuxConstntSec -> f AuxConstntSec
[appendSec] :: DLPlate f -> AppndxSec -> f AppndxSec
instance Data.Generics.Multiplate.Multiplate Drasil.DocumentLanguage.Core.DLPlate
instance GHC.Show.Show Drasil.DocumentLanguage.Core.Emphasis

module Drasil.Sections.AuxiliaryConstants
valsOfAuxConstantsF :: Idea a => a -> [QDefinition] -> Section

module Drasil.Sections.GeneralSystDesc
genSysIntro :: Contents
usrCharsF :: [Contents] -> Section
systCon :: [Contents] -> [Section] -> Section
sysContxt :: [Contents] -> Section

module Drasil.Sections.Introduction

-- | Doc.organization of the document section constructor. =&gt; Sentence
--   -&gt; c -&gt; Section -&gt; Sentence -&gt; Section
orgSec :: NamedIdea c => Sentence -> c -> Section -> Sentence -> Section

-- | Constructor for the introduction section problemIntroduction -
--   Sentence introducing the specific example problem programDefinition -
--   Sentence definition of the specific example subSections - List of
--   subsections for this section
introductionSection :: Sentence -> Sentence -> [Section] -> Section

-- | constructor for purpose of document subsection
--   purposeOfProgramParagraph - a sentence explaining the purpose of the
--   specific example
purposeOfDoc :: [Sentence] -> Section

-- | constructor for scope of requirements subsection req - the main
--   requirement for the program
scopeOfRequirements :: Sentence -> Section

-- | constructor for characteristics of the intended reader subsection
--   progName assumed topic asset r
charIntRdrF :: Idea a => a -> [Sentence] -> [Sentence] -> [Sentence] -> Section -> Section
purpDoc :: CI -> Verbosity -> [Sentence]

module Drasil.Sections.ReferenceMaterial

-- | Default reference section introduction
intro :: Contents

module Drasil.Sections.Requirements
fReqF :: [Contents] -> Section
fullReqs :: (Quantity i, MayHaveUnit i) => [i] -> Sentence -> [ConceptInstance] -> [ConceptInstance]
fullTables :: (Quantity i, MayHaveUnit i) => [i] -> [LabelledContent] -> [LabelledContent]
inReq :: Sentence -> ConceptInstance
inTable :: (Quantity i, MayHaveUnit i) => [i] -> LabelledContent

-- | takes a list of wrapped variables and creates an Input Data Table for
--   uses in Functional Requirments
mkInputPropsTable :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> r -> LabelledContent
mkQRTuple :: (Quantity i, MayHaveUnit i, HasShortName i, Referable i) => [i] -> [(QuantityDict, Sentence)]
mkQRTupleRef :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> [r] -> [(QuantityDict, Sentence)]

-- | takes a list of tuples of variables and sources and creates an table
--   for uses in Functional Requirments
mkValsSourceTable :: (Quantity i, MayHaveUnit i) => [(i, Sentence)] -> String -> Sentence -> LabelledContent
nfReqF :: [Contents] -> Section
reqF :: [Section] -> Section

module Drasil.DocDecl
type SRSDecl = [DocSection]
data DocSection
RefSec :: RefSec -> DocSection
IntroSec :: IntroSec -> DocSection
StkhldrSec :: StkhldrSec -> DocSection
GSDSec :: GSDSec -> DocSection
SSDSec :: SSDSec -> DocSection
ReqrmntSec :: ReqrmntSec -> DocSection
LCsSec :: DocSection
UCsSec :: DocSection
TraceabilitySec :: TraceabilitySec -> DocSection
AuxConstntSec :: AuxConstntSec -> DocSection
Bibliography :: DocSection
AppndxSec :: AppndxSec -> DocSection
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Specific System Description section . Contains a list of subsections.
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific system description subsections
data SSDSub
[SSDProblem] :: ProblemDescription -> SSDSub
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Problem Description section
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Problem Description subsections
data PDSub
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub
[Goals] :: [Sentence] -> PDSub

-- | Solution Characteristics Specification section
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Solution Characteristics Specification subsections
data SCSSub
[Assumptions] :: SCSSub
[TMs] :: [Sentence] -> Fields -> SCSSub
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec
data ReqsSub
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub
[FReqsSub'] :: [LabelledContent] -> ReqsSub
[NonFReqsSub] :: ReqsSub
mkDocDesc :: SystemInformation -> SRSDecl -> DocDesc

module Drasil.Sections.SpecificSystemDescription

-- | Specific System description section builder. Takes the system and
--   subsections.
specSysDescr :: [Section] -> Section
probDescF :: Sentence -> [Section] -> Section
termDefnF :: Concept c => Maybe Sentence -> [c] -> Section
termDefnF' :: Maybe Sentence -> [Contents] -> Section
physSystDesc :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> Section
goalStmtF :: [Sentence] -> [Contents] -> Section
solutionCharSpecIntro :: Idea a => a -> Section -> Contents
assumpF :: [Contents] -> Section
thModF :: Idea a => a -> [Contents] -> Section
genDefnF :: [Contents] -> Section
dataDefnF :: Sentence -> [Contents] -> Section
inModelF :: Section -> Section -> Section -> Section -> [Contents] -> Section
datConF :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> Section
inDataConstTbl :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => [c] -> LabelledContent
outDataConstTbl :: (Quantity c, Constrained c) => [c] -> LabelledContent
propCorSolF :: (Quantity c, Constrained c) => [c] -> [Contents] -> Section
auxSpecSent :: Sentence

module Drasil.ExtractDocDesc
getDocDesc :: DocDesc -> [Sentence]
egetDocDesc :: DocDesc -> [Expr]
ciGetDocDesc :: DocDesc -> [CI]
sentencePlate :: Monoid a => ([Sentence] -> a) -> DLPlate (Constant a)

module Drasil.Sections.Stakeholders
stakeholderIntro :: Contents
tClientF :: Idea a => a -> Sentence -> Section
tCustomerF :: Idea a => a -> Section


-- | Standard code to make a table of symbols.
module Drasil.Sections.TableOfAbbAndAcronyms

-- | Creates a standard table of abbreviations and acronyms section from a
--   given list of abbreviated chunks
tableOfAbbAndAcronyms :: Idea s => [s] -> Section

module Drasil.Sections.TableOfSymbols

-- | table of symbols creation function
table :: (Quantity s, MayHaveUnit s) => Stage -> [s] -> (s -> Sentence) -> LabelledContent
symbTableRef :: Reference

module Drasil.Sections.TableOfUnits

-- | Creates the table of units with SI name in the <a>Description</a>
--   column
tOfUnitDesc :: IsUnit s => [s] -> LabelledContent

-- | Creates the table of units with an "SI Name" column
tOfUnitSIName :: IsUnit s => [s] -> LabelledContent
unitTableRef :: Reference

module Drasil.Sections.TraceabilityMandGs
generateTraceTable :: SystemInformation -> LabelledContent
tvAssumps :: TraceViewCat
tvDataDefns :: TraceViewCat
tvGenDefns :: TraceViewCat
tvTheoryModels :: TraceViewCat
tvInsModels :: TraceViewCat
tvGoals :: TraceViewCat
tvReqs :: TraceViewCat
tvChanges :: TraceViewCat
traceMatAssumpOther :: TraceConfig
traceMatRefinement :: TraceConfig
traceMatOtherReq :: SystemInformation -> TraceConfig
traceMatStandard :: SystemInformation -> [TraceConfig]

module Drasil.TraceTable
dependencyPlate :: DLPlate (Constant [(UID, [UID])])
generateTraceMap :: [DocSection] -> TraceMap


-- | Start the process of moving away from Document as the main internal
--   representation of information, to something more informative. Over
--   time, we'll want to have a cleaner separation, but doing that all at
--   once would break too much for too long. So we start here instead.
module Drasil.DocumentLanguage

-- | Creates a document from a document description and system information
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document
extractUnits :: DocDesc -> ChunkDB -> [UnitDefn]
fillTraceMaps :: DocDesc -> SystemInformation -> SystemInformation
fillReqs :: DocDesc -> SystemInformation -> SystemInformation

-- | Helper for creating the document sections
mkSections :: SystemInformation -> DocDesc -> [Section]

-- | Helper for creating the reference section and subsections
mkRefSec :: SystemInformation -> DocDesc -> RefSec -> Section

-- | table of units constructors
tunit :: [TUIntro] -> RefTab

-- | table of units constructors
tunit' :: [TUIntro] -> RefTab

-- | Helper for creating the table of symbols
mkTSymb :: (Quantity e, Concept e, Eq e, MayHaveUnit e) => [e] -> LFunc -> [TSIntro] -> Section

-- | Default Term and given intro
--   
--   table of symbols constructor
tsymb :: [TSIntro] -> RefTab

-- | Default Defn and given intro
--   
--   table of symbols constructor
tsymb' :: [TSIntro] -> RefTab

-- | Custom function and intro.
--   
--   Custom table of symbols constructor
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | table of symbols intro builder. Used by mkRefSec
tsIntro :: [TSIntro] -> Contents

-- | table of symbols intro writer. Translates a TSIntro to a list of
--   Sentences
tsI :: TSIntro -> Sentence

-- | typographic convention writer. Translates a list of typographic
--   conventions to a sentence
typogConvention :: [TConvention] -> Sentence

-- | symbolic convention writer.
symbConvention :: [Literature] -> Sentence

-- | Table of units intro builder. Used by mkRefSec
tuIntro :: [TUIntro] -> Contents

-- | table of units intro writer. Translates a TUIntro to a Sentence.
tuI :: TUIntro -> Sentence

-- | Default table of units intro contains the
defaultTUI :: [TUIntro]
mkIntroSec :: SystemInformation -> IntroSec -> Section

-- | Helper for making the <tt>Stakeholders</tt> section
mkStkhldrSec :: StkhldrSec -> Section

-- | Helper for making the 'General System Description' section
mkGSDSec :: GSDSec -> Section

-- | Helper for making the 'Specific System Description' section
mkSSDSec :: SystemInformation -> SSDSec -> Section
mkSSDProb :: SystemInformation -> ProblemDescription -> Section
mkSolChSpec :: SystemInformation -> SolChSpec -> Section
helperCI :: ConceptInstance -> SystemInformation -> ConceptInstance

-- | Section stubs for implicit referencing
tmStub :: Section

-- | Section stubs for implicit referencing
ddStub :: Section

-- | Section stubs for implicit referencing
imStub :: Section

-- | Section stubs for implicit referencing
pdStub :: Section

-- | Helper for making the <tt>Requirements</tt> section
mkReqrmntSec :: ReqrmntSec -> Section

-- | Helper for making the <tt>LikelyChanges</tt> section
mkLCsSec :: LCsSec -> Section

-- | Helper for making the <tt>UnikelyChanges</tt> section
mkUCsSec :: UCsSec -> Section

-- | Helper for making the 'Traceability Matrices and Graphs' section
mkTraceabilitySec :: TraceabilitySec -> SystemInformation -> Section

-- | Helper for making the 'Off-the-Shelf Solutions' section
mkOffShelfSolnSec :: OffShelfSolnsSec -> Section

-- | Helper for making the 'Values of Auxiliary Constants' section
mkAuxConsSec :: AuxConstntSec -> Section

-- | Helper for making the bibliography section
mkBib :: BibRef -> Section

-- | Helper for making the <tt>Appendix</tt> section
mkAppndxSec :: AppndxSec -> Section
siSys :: SystemInformation -> IdeaDict

module Drasil.DocLang
type SRSDecl = [DocSection]
data DocSection
RefSec :: RefSec -> DocSection
IntroSec :: IntroSec -> DocSection
StkhldrSec :: StkhldrSec -> DocSection
GSDSec :: GSDSec -> DocSection
SSDSec :: SSDSec -> DocSection
ReqrmntSec :: ReqrmntSec -> DocSection
LCsSec :: DocSection
UCsSec :: DocSection
TraceabilitySec :: TraceabilitySec -> DocSection
AuxConstntSec :: AuxConstntSec -> DocSection
Bibliography :: DocSection
AppndxSec :: AppndxSec -> DocSection
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec
data ReqsSub
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub
[FReqsSub'] :: [LabelledContent] -> ReqsSub
[NonFReqsSub] :: ReqsSub

-- | Problem Description subsections
data PDSub
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub
[Goals] :: [Sentence] -> PDSub

-- | Problem Description section
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Specific System Description section . Contains a list of subsections.
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific system description subsections
data SSDSub
[SSDProblem] :: ProblemDescription -> SSDSub
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Solution Characteristics Specification subsections
data SCSSub
[Assumptions] :: SCSSub
[TMs] :: [Sentence] -> Fields -> SCSSub
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Solution Characteristics Specification section
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Creates a document from a document description and system information
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document

-- | Default Term and given intro
--   
--   table of symbols constructor
tsymb :: [TSIntro] -> RefTab

-- | Custom function and intro.
--   
--   Custom table of symbols constructor
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | table of units constructors
tunit :: [TUIntro] -> RefTab

-- | table of units constructors
tunit' :: [TUIntro] -> RefTab

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [QDefinition] -> AuxConstntSec

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | Systen constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: Sentence -> CI -> Section -> Sentence -> IntroSub

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Create a data definition using a list of fields, a database of
--   symbols, and a <a>QDefinition</a> (called automatically by
--   <tt>SCSSub</tt> program).
ddefn :: Fields -> SystemInformation -> DataDefinition -> LabelledContent
data ModelDB
ddRefDB :: ModelDB -> RefMap DataDefinition
mdb :: [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> ModelDB
purpDoc :: CI -> Verbosity -> [Sentence]

-- | Default reference section introduction
intro :: Contents
inReq :: Sentence -> ConceptInstance
inTable :: (Quantity i, MayHaveUnit i) => [i] -> LabelledContent

-- | takes a list of wrapped variables and creates an Input Data Table for
--   uses in Functional Requirments
mkInputPropsTable :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> r -> LabelledContent
mkQRTuple :: (Quantity i, MayHaveUnit i, HasShortName i, Referable i) => [i] -> [(QuantityDict, Sentence)]
mkQRTupleRef :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> [r] -> [(QuantityDict, Sentence)]

-- | takes a list of tuples of variables and sources and creates an table
--   for uses in Functional Requirments
mkValsSourceTable :: (Quantity i, MayHaveUnit i) => [(i, Sentence)] -> String -> Sentence -> LabelledContent
auxSpecSent :: Sentence
termDefnF' :: Maybe Sentence -> [Contents] -> Section
traceMatStandard :: SystemInformation -> [TraceConfig]
getDocDesc :: DocDesc -> [Sentence]
egetDocDesc :: DocDesc -> [Expr]
ciGetDocDesc :: DocDesc -> [CI]
generateTraceMap :: [DocSection] -> TraceMap

-- | Makes a reference label for a soultion statement.
solutionLabel :: Reference

-- | Makes a reference label for a characteristics statement.
characteristicsLabel :: Reference
