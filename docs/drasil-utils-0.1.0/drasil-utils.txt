-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Utils SubPackage
--   
--   A framework for code and document generation for scientific software -
--   Utils SubPackage
@package drasil-utils
@version 0.1.0

module Utils.Drasil
data EnumType
Numb :: EnumType
Upper :: EnumType
Lower :: EnumType
data WrapType
Parens :: WrapType
Period :: WrapType
data SepType
Comma :: SepType
SemiCol :: SepType
data FoldType
List :: FoldType
Options :: FoldType

-- | helper for formatting constraints
foldConstraints :: (Quantity c) => c -> [Constraint] -> Sentence

-- | creates an list of elements with "enumerators" in "wrappers" using
--   foldlList
foldlEnumList :: EnumType -> WrapType -> SepType -> FoldType -> [Sentence] -> Sentence

-- | creates a list of elements separated by a "separator", ending with
--   "and" or "or"
foldlList :: SepType -> FoldType -> [Sentence] -> Sentence

-- | fold sentences then turns into content
foldlSP :: [Sentence] -> Contents
foldlSP_ :: [Sentence] -> Contents
foldlSPCol :: [Sentence] -> Contents

-- | partial function application of foldle for sentences specifically
foldlSent :: [Sentence] -> Sentence

-- | foldlSent but does not end with period
foldlSent_ :: [Sentence] -> Sentence

-- | foldlSent but ends with colon
foldlSentCol :: [Sentence] -> Sentence

-- | creates a list of elements separated by commas, including the last
--   element
foldlsC :: [Sentence] -> Sentence

-- | Creates an NP by combining two <a>NamedIdea</a>s with the word "and"
--   between their terms. Plural is defaulted to <tt>(phrase t1) "of"
--   (plural t2)</tt>
and_ :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Same as <a>and_</a> combinator, except phrase default of second term
--   is plural instead of phrase
and_' :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Customizable <a>and</a> combinator
andRT :: (NamedIdea c, NamedIdea d) => (c -> Sentence) -> (d -> Sentence) -> c -> d -> NP

-- | Combinator for combining two <a>NamedChunk</a>s into one. <i>Does not
--   preserve abbreviations</i>
compoundNC :: (NamedIdea a, NamedIdea b) => a -> b -> NamedChunk
compoundNC' :: (NamedIdea a, NamedIdea b) => a -> b -> NamedChunk
compoundNC'' :: (NamedIdea a, NamedIdea b) => (NP -> Sentence) -> (NP -> Sentence) -> a -> b -> NamedChunk
compoundNC''' :: (NamedIdea a, NamedIdea b) => (NP -> Sentence) -> a -> b -> NamedChunk
compoundNCP1 :: NamedChunk -> NamedChunk -> NamedChunk
compoundNCPlPh :: NamedChunk -> NamedChunk -> NamedChunk
compoundNCPlPl :: NamedChunk -> NamedChunk -> NamedChunk

-- | Inserts the word "for" between the titleized versions of two terms
for :: (NamedIdea c, NamedIdea d) => c -> d -> Sentence

-- | Similar to <a>for</a>, but uses titleized version of term 1 with the
--   abbreviation (if it exists, phrase otherwise) for term 2
for' :: (NamedIdea c, Idea d) => c -> d -> Sentence

-- | Similar to <a>for</a>, but allows one to specify the function to use
--   on each term before inserting for. For example one could use <tt>for''
--   phrase plural t1 t2</tt>
for'' :: (c -> Sentence) -> (d -> Sentence) -> c -> d -> Sentence

-- | Creates a noun phrase by combining two <a>NamedIdea</a>s with the word
--   "of" between their terms. Plural is defaulted to <tt>(phrase t1) "of"
--   (plural t2)</tt>
of_ :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Creates a noun phrase by combining two <a>NamedIdea</a>s with the word
--   "of" between them. <a>phrase</a> is defaulted to <tt>(phrase t1) "of"
--   (plural t2)</tt>. Plural is the same.
of_' :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Same as of_, except plural default of second term is phrase
of_'' :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Same as of_, except phrase default of first term is plural instead of
--   phrase
of__ :: (NamedIdea c, NamedIdea d) => c -> d -> NP

-- | Same as of__, except combining Sentence piece is "of a"
ofA :: (NamedIdea c, NamedIdea d) => c -> d -> NP
ofN_ :: (NamedIdea c, NounPhrase d) => c -> d -> NP
the :: (NamedIdea t) => t -> NP
the' :: (NamedIdea t) => t -> NP
theCustom :: (t -> Sentence) -> t -> NP
with :: (NamedIdea c, NamedIdea d) => c -> d -> NP
andIts :: Sentence -> Sentence -> Sentence
andThe :: Sentence -> Sentence -> Sentence
isExpctdToHv :: Sentence -> Sentence -> Sentence
isThe :: Sentence -> Sentence -> Sentence
ofGiv :: Sentence -> Sentence -> Sentence
ofGiv' :: Sentence -> Sentence -> Sentence
ofThe :: Sentence -> Sentence -> Sentence
ofThe' :: Sentence -> Sentence -> Sentence
sOf :: Sentence -> Sentence -> Sentence
sOr :: Sentence -> Sentence -> Sentence
sVersus :: Sentence -> Sentence -> Sentence
sAnd :: Sentence -> Sentence -> Sentence
sAre :: Sentence -> Sentence -> Sentence
sIn :: Sentence -> Sentence -> Sentence
sIs :: Sentence -> Sentence -> Sentence
toThe :: Sentence -> Sentence -> Sentence
