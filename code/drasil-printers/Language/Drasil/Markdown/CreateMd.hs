module Language.Drasil.Markdown.CreateMd (
    makeMd, introInfo, sumInfo, invalidOS, regularSec, contSep, 
    instDoc, filtEmp) 
    where

import Data.List (intersperse, filter)
import Prelude hiding ((<>))
import Text.PrettyPrint.HughesPJ (Doc, empty, isEmpty, vcat, text, (<+>),
    (<>))

type Seperator = Doc


makeMd :: [Doc] -> Doc
makeMd lst = (vcat . intersperse secSep . filtEmp) lst <> contSep <>
    doubleSep <> endNote 

-- Example title and purpose section
introInfo :: String -> Doc
introInfo name = introSec (text name) (text "__authors__") (text "__purpose__")

-- Language version section
sumInfo :: String -> String -> String -> Doc
sumInfo name pl plv = regularSec (text $
   "Running " ++ name ++ " on " ++ pl) 
    (text $ pl ++ " Version: " ++ plv)

-- Invalid Operating Systems section
invalidOS :: Maybe String -> Doc
invalidOS Nothing = empty
invalidOS (Just unsuppOS) = regularSec (text "Unsupported Operating Systems")
    (text $ "- " ++ unsuppOS)

-- Instruction section
instDoc :: Doc
instDoc = runInstDoc <> doubleSep <> makeInstDoc

commandLine :: Doc
commandLine = text $ "In your terminal command line, enter the same directory as this " ++
    "README file. Then enter the following line"

runInstDoc :: Doc
runInstDoc = (text "How to Run the Program:") <> contSep <>
    commandLine <> contSep <> text "`make run RUNARGS=input.txt`"

makeInstDoc :: Doc
makeInstDoc = (text "How to Build the Program:") <> contSep <> commandLine <>contSep <>
    text "`make build`"

-- End section TODO add license and logo
endNote :: Doc
endNote = text "* This README is a software artifact generated by Drasil."

-- Section seperators
secSep, contSep :: Seperator
secSep = text "\n------------------------------------------------------------"
contSep = text "\n"
doubleSep = text "\n\n"

-- Functions to construct section from header and message
introSec ::  Doc -> Doc -> Doc -> Doc
introSec hd ms1 ms2 = text "#" <+> hd <+> contSep <> text "> "<+> ms1 <+> 
    contSep <+> text "> " <+> ms2

regularSec :: Doc -> Doc -> Doc
regularSec hd ms = text "**" <+> hd <> text ":**" <+> contSep <+> ms

-- Helper for makeMd and dependencies
filtEmp :: [Doc] -> [Doc]
filtEmp = filter (not . isEmpty) 
