The Drasil Framework for Literate Scientific Software

This talk introduces the Drasil framework for developing Scientific Computing Software (SCS) using a literate approach.  In a literate approach, the scientific and computational knowledge necessary for a particular problem is first recorded as a set of “chunks.”  From the knowledge chunks, all of the required software artifacts can be generated using Drasil “recipes,” which provide instructions for transforming the knowledge into the required artifacts.  Potential generated artifacts include requirements specification, design documentation, code, test reports and build instructions.  Although creating the knowledge base requires significant effort, the Drasil framework provides many benefits that make this effort worthwhile.  For instance, Drasil improves software verifiability, since it facilities the creation of documentation that shows how the appropriate assumptions and definitions can be used to transform the original abstract theory to the final concrete code.  In practice, this kind of documentation is often neglected, or full of inconsistencies, because a manual approach to documentation is time consuming and error prone.  The generative approach eliminates inconsistencies because the knowledge is not duplicated; it is captured once and transformed as needed.  The generative approach further facilitates verification by providing traceability between assumptions, theory, definitions, equations, equation derivations, software modules and code.  This means that a reviewer of the software will essentially be able to find a rationale/justification for each line of code.  Effort invested into building the Drasil knowledge base will pay off in the future, since later projects can reuse the knowledge from earlier projects.  The Drasil framework is still a work in progress, but we have made progress.  In particular, this talk will present a working example of the code and documentation for software to simulate the temperature in a solar water heating tank.