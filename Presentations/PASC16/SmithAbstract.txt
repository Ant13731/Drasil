A Literate Process for Improving the Quality of Scientific Computing Software

Scientific Computing (SC) software sometimes suffers with respect to the qualities of reusability, maintainability, verifiability and reproducibility because of a lack of documentation.  A potential solution is to generalize the idea of Literate Programming.  Our proposed Literate Process will not only generate program documentation and code from the source files, but also other software artifacts, such as the requirements specification, design documentation, and test reports.  Documentation quality will improve because a generator removes the drudgery and errors associated with information duplication and traceability.  Using Haskell we have developed a prototype tool, named Drasil, to support this process.  The fundamental task for Drasil is managing knowledge through what are termed chunks.  A recipe is used to put the chunks together and a generator then interprets the recipes to produce the desired documentation.  An example will be shown for software that simulates the temperature in a solar water heating tank.