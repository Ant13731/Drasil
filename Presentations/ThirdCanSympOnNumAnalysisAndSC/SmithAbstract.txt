A Literate Approach for Improving the Verifiability, Reusability and Reproducibility of Scientific Computing Software

This talk describes the vision for Drasil, a framework for documenting and developing  Scientific Computing Software (SCS).  Drasil uses a literate approach, where the scientific and computational knowledge necessary for a particular problem are first recorded as a set of “chunks.”  From the knowledge chunks, all of the required software artifacts are generated using “recipes,” which provide instructions for transforming the knowledge into the required artifacts.  Potential generated artifacts include requirements specification, design documentation, code, test reports and build instructions.  Although creating the knowledge base requires significant effort, the proposed Drasil framework provides benefits that make this effort worthwhile.  For instance, Drasil improves software verifiability, since it facilities the creation of documentation that shows how the appropriate assumptions and definitions can be used to transform the original abstract theory to the final concrete code.  The generative approach eliminates inconsistencies because the knowledge is not duplicated; it is captured once and transformed as needed.  The generative approach further facilitates verification by providing traceability between assumptions, theory, definitions, equations, equation derivations, software modules and code.  Effort invested into building the Drasil knowledge base improves reusability, since later projects can reuse the knowledge from earlier projects.  Reproducibility is improved because all artifacts can be reproduced from the original knowledge chunks, as desired.  Recipes that intermingle documentation, code and program output, can potentially be used to explain the complete traceability between idea and implementation.  The current status of the Drasil framework will be illustrated via the example of software to simulate the temperature in a solar water heating tank.